
//----------------------------------------------------
// The following code was generated by CUP v0.10g
// Wed Oct 15 18:25:06 CDT 2025
//----------------------------------------------------

package Parse;


public class Grm extends java_cup.runtime.lr_parser {

  /** constructor */
  public Grm() {super();}

  /** production table */
  protected static final short _production_table[][] = {
        {0, 2},     {1, 1},     {1, 1},     {1, 3},     {29, 6}, 
        {29, 6},     {29, 6},     {29, 6},     {29, 4},     {29, 4}, 
        {29, 5},     {16, 1},     {14, 2},     {14, 1},     {15, 2}, 
        {40, 1},     {40, 1},     {40, 1},     {40, 1},     {40, 1}, 
        {40, 1},     {42, 3},     {42, 4},     {42, 3},     {26, 4}, 
        {31, 0},     {31, 1},     {30, 1},     {30, 2},     {46, 0}, 
        {46, 1},     {44, 1},     {44, 2},     {47, 2},     {3, 0}, 
        {3, 1},     {43, 5},     {43, 7},     {43, 5},     {41, 5}, 
        {41, 7},     {41, 9},     {33, 1},     {22, 0},     {22, 2}, 
        {23, 1},     {23, 1},     {23, 1},     {23, 1},     {23, 1}, 
        {23, 1},     {19, 1},     {19, 2},     {20, 2},     {21, 1}, 
        {21, 2},     {18, 3},     {54, 2},     {54, 1},     {63, 1}, 
        {63, 2},     {57, 1},     {57, 1},     {57, 2},     {24, 1}, 
        {24, 1},     {51, 1},     {51, 2},     {34, 1},     {34, 1}, 
        {34, 1},     {34, 1},     {34, 1},     {34, 1},     {34, 1}, 
        {34, 2},     {34, 1},     {37, 0},     {37, 2},     {60, 3}, 
        {62, 1},     {62, 3},     {61, 1},     {61, 3},     {58, 3}, 
        {58, 4},     {59, 1},     {59, 1},     {50, 3},     {50, 2}, 
        {50, 3},     {35, 1},     {35, 2},     {56, 1},     {53, 1}, 
        {53, 1},     {53, 3},     {52, 1},     {52, 4},     {52, 4}, 
        {52, 3},     {52, 3},     {52, 2},     {52, 2},     {32, 1}, 
        {32, 3},     {65, 1},     {65, 2},     {65, 2},     {65, 2}, 
        {65, 2},     {65, 4},     {66, 1},     {66, 1},     {66, 1}, 
        {66, 1},     {66, 1},     {66, 1},     {25, 1},     {25, 4}, 
        {4, 1},     {4, 3},     {4, 3},     {4, 3},     {5, 1}, 
        {5, 3},     {5, 3},     {6, 1},     {6, 3},     {6, 3}, 
        {7, 1},     {7, 3},     {7, 3},     {7, 3},     {7, 3}, 
        {8, 1},     {8, 3},     {8, 3},     {9, 1},     {9, 3}, 
        {10, 1},     {10, 3},     {11, 1},     {11, 3},     {12, 1}, 
        {12, 3},     {13, 1},     {13, 3},     {27, 1},     {27, 4}, 
        {28, 1},     {28, 3},     {67, 1},     {67, 1},     {67, 1}, 
        {67, 1},     {67, 1},     {67, 1},     {67, 1},     {67, 1}, 
        {67, 1},     {67, 1},     {67, 1}  };

  /** access to production table */
  public short[][] production_table() {return _production_table;}

  /** parse action table */
  protected static final short[][] _action_table = {
    /*0*/{1,28,3,17,7,10,9,12,11,2,12,5,14,26,27,15,33,32,34,25,36,8,66,27,75,3,-1,0},
    /*1*/{3,-115,7,-115,9,-115,11,-115,12,-115,14,-115,27,-115,33,-115,34,-115,36,-115,66,-115,75,-115,-1,0},
    /*2*/{3,17,7,10,9,124,11,2,12,5,14,26,27,15,33,32,34,25,36,8,66,27,75,3,-1,0},
    /*3*/{0,-98,1,-98,3,-98,6,-98,7,-98,8,-98,9,-98,10,-98,11,-98,12,-98,13,-98,14,-98,15,-98,16,-98,17,-98,19,-98,20,-98,21,-98,22,-98,23,-98,24,-98,27,-98,28,-98,29,-98,30,-98,31,-98,32,-98,33,-98,34,-98,35,-98,36,-98,37,-98,38,-98,39,-98,42,-98,43,-98,44,-98,45,-98,46,-98,47,-98,48,-98,51,-98,52,-98,54,-98,66,-98,75,-98,-1,0},
    /*4*/{3,-116,7,-116,9,-116,11,-116,12,-116,14,-116,27,-116,33,-116,34,-116,36,-116,66,-116,75,-116,-1,0},
    /*5*/{0,-3,10,-3,13,-3,17,-3,23,-3,-1,0},
    /*6*/{0,-121,1,-121,3,-121,6,-121,7,-121,8,-121,9,-121,10,-121,11,-121,12,-121,13,-121,14,-121,16,-121,17,-121,19,-121,21,-121,23,-121,24,-121,27,-121,28,-121,30,-121,33,-121,34,-121,36,-121,42,-121,43,-121,44,-121,45,-121,46,-121,52,-121,66,-121,75,-121,-1,0},
    /*7*/{3,17,7,10,9,77,11,2,12,5,14,26,27,15,33,32,34,25,36,8,66,27,75,3,-1,0},
    /*8*/{0,-141,1,-141,3,-141,7,54,8,-141,9,-141,10,-141,11,-141,12,-141,13,-141,14,-141,17,-141,23,-141,24,-141,27,-141,30,-141,33,-141,34,-141,36,-141,52,-141,66,-141,75,-141,-1,0},
    /*9*/{3,-114,7,-114,9,-114,11,-114,12,-114,14,-114,27,-114,33,-114,34,-114,36,-114,66,-114,75,-114,-1,0},
    /*10*/{0,-119,1,-119,3,-119,6,-119,7,-119,8,-119,9,-119,10,-119,11,-119,12,-119,13,-119,14,-119,16,-119,17,-119,19,-119,20,117,21,-119,23,-119,24,-119,27,-119,28,-119,29,120,30,-119,31,113,32,109,33,-119,34,-119,35,114,36,-119,37,111,39,119,42,-119,43,-119,44,-119,45,-119,46,-119,47,118,48,115,51,110,52,-119,54,112,66,-119,75,-119,-1,0},
    /*11*/{1,28,2,100,3,17,7,10,9,12,11,2,12,5,14,26,27,15,33,32,34,25,36,8,56,99,59,97,61,103,63,105,64,102,66,27,67,104,68,96,71,98,75,3,-1,0},
    /*12*/{0,-151,10,-151,13,-151,17,-151,23,-151,-1,0},
    /*13*/{0,-131,1,-131,3,-131,7,-131,8,-131,9,-131,10,-131,11,-131,12,-131,13,-131,14,-131,17,-131,19,-131,21,-131,23,-131,24,-131,27,-131,28,-131,30,-131,33,-131,34,-131,36,-131,42,64,43,-131,44,-131,45,-131,46,65,52,-131,66,-131,75,-131,-1,0},
    /*14*/{3,-118,7,-118,9,-118,11,-118,12,-118,14,-118,27,-118,33,-118,34,-118,36,-118,66,-118,75,-118,-1,0},
    /*15*/{0,-107,1,-107,3,-107,6,-107,7,-107,8,-107,9,85,10,-107,11,-107,12,-107,13,-107,14,-107,15,86,16,-107,17,-107,19,-107,20,-107,21,-107,22,82,23,-107,24,-107,27,-107,28,-107,29,-107,30,-107,31,-107,32,-107,33,-107,34,83,35,-107,36,81,37,-107,38,84,39,-107,42,-107,43,-107,44,-107,45,-107,46,-107,47,-107,48,-107,51,-107,52,-107,54,-107,66,-107,75,-107,-1,0},
    /*16*/{0,-96,1,-96,3,-96,6,-96,7,-96,8,-96,9,-96,10,-96,11,-96,12,-96,13,-96,14,-96,15,-96,16,-96,17,-96,19,-96,20,-96,21,-96,22,-96,23,-96,24,-96,27,-96,28,-96,29,-96,30,-96,31,-96,32,-96,33,-96,34,-96,35,-96,36,-96,37,-96,38,-96,39,-96,42,-96,43,-96,44,-96,45,-96,46,-96,47,-96,48,-96,51,-96,52,-96,54,-96,66,-96,75,-96,-1,0},
    /*17*/{0,-143,1,-143,3,-143,7,-143,8,-143,9,-143,10,-143,11,-143,12,-143,13,-143,14,-143,17,-143,23,-143,24,52,27,-143,30,-143,33,-143,34,-143,36,-143,52,-143,66,-143,75,-143,-1,0},
    /*18*/{0,-147,1,-147,3,-147,7,-147,9,-147,10,-147,11,-147,12,-147,13,-147,14,-147,17,-147,23,-147,27,-147,30,48,33,-147,34,-147,36,-147,52,-147,66,-147,75,-147,-1,0},
    /*19*/{0,80,13,43,-1,0},
    /*20*/{0,-145,1,-145,3,-145,7,-145,8,50,9,-145,10,-145,11,-145,12,-145,13,-145,14,-145,17,-145,23,-145,27,-145,30,-145,33,-145,34,-145,36,-145,52,-145,66,-145,75,-145,-1,0},
    /*21*/{0,-128,1,-128,3,-128,7,-128,8,-128,9,-128,10,-128,11,-128,12,67,13,-128,14,68,17,-128,19,-128,21,-128,23,-128,24,-128,27,-128,28,-128,30,-128,33,-128,34,-128,36,-128,42,-128,43,-128,44,-128,45,-128,46,-128,52,-128,66,-128,75,-128,-1,0},
    /*22*/{0,-136,1,-136,3,-136,7,-136,8,-136,9,-136,10,-136,11,-136,12,-136,13,-136,14,-136,17,-136,19,59,21,60,23,-136,24,-136,27,-136,28,-136,30,-136,33,-136,34,-136,36,-136,43,61,44,-136,45,62,52,-136,66,-136,75,-136,-1,0},
    /*23*/{0,-139,1,-139,3,-139,7,-139,8,-139,9,-139,10,-139,11,-139,12,-139,13,-139,14,-139,17,-139,23,-139,24,-139,27,-139,28,57,30,-139,33,-139,34,-139,36,-139,44,56,52,-139,66,-139,75,-139,-1,0},
    /*24*/{3,17,7,10,9,77,11,2,12,5,14,26,27,15,33,32,34,25,36,8,66,27,75,3,-1,0},
    /*25*/{3,-117,7,-117,9,-117,11,-117,12,-117,14,-117,27,-117,33,-117,34,-117,36,-117,66,-117,75,-117,-1,0},
    /*26*/{0,-95,1,-95,3,-95,6,-95,7,-95,8,-95,9,-95,10,-95,11,-95,12,-95,13,-95,14,-95,15,-95,16,-95,17,-95,19,-95,20,-95,21,-95,22,-95,23,-95,24,-95,27,-95,28,-95,29,-95,30,-95,31,-95,32,-95,33,-95,34,-95,35,-95,36,-95,37,-95,38,-95,39,-95,42,-95,43,-95,44,-95,45,-95,46,-95,47,-95,48,-95,51,-95,52,-95,54,-95,66,-95,75,-95,-1,0},
    /*27*/{0,-2,10,-2,13,-2,17,-2,23,-2,-1,0},
    /*28*/{0,-149,1,28,3,17,7,10,9,12,10,-149,11,2,12,5,13,-149,14,26,17,-149,23,-149,27,15,33,32,34,25,36,8,52,41,66,27,75,3,-1,0},
    /*29*/{0,-125,1,-125,3,-125,6,36,7,-125,8,-125,9,-125,10,-125,11,37,12,-125,13,-125,14,-125,16,35,17,-125,19,-125,21,-125,23,-125,24,-125,27,-125,28,-125,30,-125,33,-125,34,-125,36,-125,42,-125,43,-125,44,-125,45,-125,46,-125,52,-125,66,-125,75,-125,-1,0},
    /*30*/{3,17,7,10,9,12,11,2,12,5,14,26,27,15,33,32,34,25,36,8,66,27,75,3,-1,0},
    /*31*/{3,-113,7,-113,9,-113,11,-113,12,-113,14,-113,27,-113,33,-113,34,-113,36,-113,66,-113,75,-113,-1,0},
    /*32*/{0,-119,1,-119,3,-119,6,-119,7,-119,8,-119,9,-119,10,-119,11,-119,12,-119,13,-119,14,-119,16,-119,17,-119,19,-119,20,-119,21,-119,23,-119,24,-119,27,-119,28,-119,29,-119,30,-119,31,-119,32,-119,33,-119,34,-119,35,-119,36,-119,37,-119,39,-119,42,-119,43,-119,44,-119,45,-119,46,-119,47,-119,48,-119,51,-119,52,-119,54,-119,66,-119,75,-119,-1,0},
    /*33*/{0,-110,1,-110,3,-110,6,-110,7,-110,8,-110,9,-110,10,-110,11,-110,12,-110,13,-110,14,-110,16,-110,17,-110,19,-110,20,-110,21,-110,23,-110,24,-110,27,-110,28,-110,29,-110,30,-110,31,-110,32,-110,33,-110,34,-110,35,-110,36,-110,37,-110,39,-110,42,-110,43,-110,44,-110,45,-110,46,-110,47,-110,48,-110,51,-110,52,-110,54,-110,66,-110,75,-110,-1,0},
    /*34*/{3,17,7,10,9,12,11,2,12,5,14,26,27,15,33,32,34,25,36,8,66,27,75,3,-1,0},
    /*35*/{3,17,7,10,9,12,11,2,12,5,14,26,27,15,33,32,34,25,36,8,66,27,75,3,-1,0},
    /*36*/{3,17,7,10,9,12,11,2,12,5,14,26,27,15,33,32,34,25,36,8,66,27,75,3,-1,0},
    /*37*/{0,-122,1,-122,3,-122,6,-122,7,-122,8,-122,9,-122,10,-122,11,-122,12,-122,13,-122,14,-122,16,-122,17,-122,19,-122,21,-122,23,-122,24,-122,27,-122,28,-122,30,-122,33,-122,34,-122,36,-122,42,-122,43,-122,44,-122,45,-122,46,-122,52,-122,66,-122,75,-122,-1,0},
    /*38*/{0,-124,1,-124,3,-124,6,-124,7,-124,8,-124,9,-124,10,-124,11,-124,12,-124,13,-124,14,-124,16,-124,17,-124,19,-124,21,-124,23,-124,24,-124,27,-124,28,-124,30,-124,33,-124,34,-124,36,-124,42,-124,43,-124,44,-124,45,-124,46,-124,52,-124,66,-124,75,-124,-1,0},
    /*39*/{0,-123,1,-123,3,-123,6,-123,7,-123,8,-123,9,-123,10,-123,11,-123,12,-123,13,-123,14,-123,16,-123,17,-123,19,-123,21,-123,23,-123,24,-123,27,-123,28,-123,30,-123,33,-123,34,-123,36,-123,42,-123,43,-123,44,-123,45,-123,46,-123,52,-123,66,-123,75,-123,-1,0},
    /*40*/{3,17,7,10,9,12,11,2,12,5,14,26,27,15,33,32,34,25,36,8,66,27,75,3,-1,0},
    /*41*/{13,43,17,44,-1,0},
    /*42*/{3,17,7,10,9,12,11,2,12,5,14,26,27,15,33,32,34,25,36,8,66,27,75,3,-1,0},
    /*43*/{3,17,7,10,9,12,11,2,12,5,14,26,27,15,33,32,34,25,36,8,66,27,75,3,-1,0},
    /*44*/{0,-150,10,-150,13,-150,17,-150,23,-150,-1,0},
    /*45*/{0,-4,10,-4,13,-4,17,-4,23,-4,-1,0},
    /*46*/{0,-148,1,-148,3,-148,7,-148,9,-148,10,-148,11,-148,12,-148,13,-148,14,-148,17,-148,23,-148,27,-148,30,48,33,-148,34,-148,36,-148,52,-148,66,-148,75,-148,-1,0},
    /*47*/{3,17,7,10,9,12,11,2,12,5,14,26,27,15,33,32,34,25,36,8,66,27,75,3,-1,0},
    /*48*/{0,-146,1,-146,3,-146,7,-146,8,50,9,-146,10,-146,11,-146,12,-146,13,-146,14,-146,17,-146,23,-146,27,-146,30,-146,33,-146,34,-146,36,-146,52,-146,66,-146,75,-146,-1,0},
    /*49*/{3,17,7,10,9,12,11,2,12,5,14,26,27,15,33,32,34,25,36,8,66,27,75,3,-1,0},
    /*50*/{0,-144,1,-144,3,-144,7,-144,8,-144,9,-144,10,-144,11,-144,12,-144,13,-144,14,-144,17,-144,23,-144,24,52,27,-144,30,-144,33,-144,34,-144,36,-144,52,-144,66,-144,75,-144,-1,0},
    /*51*/{3,17,7,10,9,12,11,2,12,5,14,26,27,15,33,32,34,25,36,8,66,27,75,3,-1,0},
    /*52*/{0,-142,1,-142,3,-142,7,-142,8,-142,9,-142,10,-142,11,-142,12,-142,13,-142,14,-142,17,-142,23,-142,24,-142,27,-142,30,-142,33,-142,34,-142,36,-142,52,-142,66,-142,75,-142,-1,0},
    /*53*/{3,17,7,10,9,12,11,2,12,5,14,26,27,15,33,32,34,25,36,8,66,27,75,3,-1,0},
    /*54*/{0,-140,1,-140,3,-140,7,-140,8,-140,9,-140,10,-140,11,-140,12,-140,13,-140,14,-140,17,-140,23,-140,24,-140,27,-140,28,57,30,-140,33,-140,34,-140,36,-140,44,56,52,-140,66,-140,75,-140,-1,0},
    /*55*/{3,17,7,10,9,12,11,2,12,5,14,26,27,15,33,32,34,25,36,8,66,27,75,3,-1,0},
    /*56*/{3,17,7,10,9,12,11,2,12,5,14,26,27,15,33,32,34,25,36,8,66,27,75,3,-1,0},
    /*57*/{0,-138,1,-138,3,-138,7,-138,8,-138,9,-138,10,-138,11,-138,12,-138,13,-138,14,-138,17,-138,19,59,21,60,23,-138,24,-138,27,-138,28,-138,30,-138,33,-138,34,-138,36,-138,43,61,44,-138,45,62,52,-138,66,-138,75,-138,-1,0},
    /*58*/{3,17,7,10,9,12,11,2,12,5,14,26,27,15,33,32,34,25,36,8,66,27,75,3,-1,0},
    /*59*/{3,17,7,10,9,12,11,2,12,5,14,26,27,15,33,32,34,25,36,8,66,27,75,3,-1,0},
    /*60*/{3,17,7,10,9,12,11,2,12,5,14,26,27,15,33,32,34,25,36,8,66,27,75,3,-1,0},
    /*61*/{3,17,7,10,9,12,11,2,12,5,14,26,27,15,33,32,34,25,36,8,66,27,75,3,-1,0},
    /*62*/{0,-135,1,-135,3,-135,7,-135,8,-135,9,-135,10,-135,11,-135,12,-135,13,-135,14,-135,17,-135,19,-135,21,-135,23,-135,24,-135,27,-135,28,-135,30,-135,33,-135,34,-135,36,-135,42,64,43,-135,44,-135,45,-135,46,65,52,-135,66,-135,75,-135,-1,0},
    /*63*/{3,17,7,10,9,12,11,2,12,5,14,26,27,15,33,32,34,25,36,8,66,27,75,3,-1,0},
    /*64*/{3,17,7,10,9,12,11,2,12,5,14,26,27,15,33,32,34,25,36,8,66,27,75,3,-1,0},
    /*65*/{0,-130,1,-130,3,-130,7,-130,8,-130,9,-130,10,-130,11,-130,12,67,13,-130,14,68,17,-130,19,-130,21,-130,23,-130,24,-130,27,-130,28,-130,30,-130,33,-130,34,-130,36,-130,42,-130,43,-130,44,-130,45,-130,46,-130,52,-130,66,-130,75,-130,-1,0},
    /*66*/{3,17,7,10,9,12,11,2,12,5,14,26,27,15,33,32,34,25,36,8,66,27,75,3,-1,0},
    /*67*/{3,17,7,10,9,12,11,2,12,5,14,26,27,15,33,32,34,25,36,8,66,27,75,3,-1,0},
    /*68*/{0,-127,1,-127,3,-127,6,36,7,-127,8,-127,9,-127,10,-127,11,37,12,-127,13,-127,14,-127,16,35,17,-127,19,-127,21,-127,23,-127,24,-127,27,-127,28,-127,30,-127,33,-127,34,-127,36,-127,42,-127,43,-127,44,-127,45,-127,46,-127,52,-127,66,-127,75,-127,-1,0},
    /*69*/{0,-126,1,-126,3,-126,6,36,7,-126,8,-126,9,-126,10,-126,11,37,12,-126,13,-126,14,-126,16,35,17,-126,19,-126,21,-126,23,-126,24,-126,27,-126,28,-126,30,-126,33,-126,34,-126,36,-126,42,-126,43,-126,44,-126,45,-126,46,-126,52,-126,66,-126,75,-126,-1,0},
    /*70*/{0,-129,1,-129,3,-129,7,-129,8,-129,9,-129,10,-129,11,-129,12,67,13,-129,14,68,17,-129,19,-129,21,-129,23,-129,24,-129,27,-129,28,-129,30,-129,33,-129,34,-129,36,-129,42,-129,43,-129,44,-129,45,-129,46,-129,52,-129,66,-129,75,-129,-1,0},
    /*71*/{0,-134,1,-134,3,-134,7,-134,8,-134,9,-134,10,-134,11,-134,12,-134,13,-134,14,-134,17,-134,19,-134,21,-134,23,-134,24,-134,27,-134,28,-134,30,-134,33,-134,34,-134,36,-134,42,64,43,-134,44,-134,45,-134,46,65,52,-134,66,-134,75,-134,-1,0},
    /*72*/{0,-133,1,-133,3,-133,7,-133,8,-133,9,-133,10,-133,11,-133,12,-133,13,-133,14,-133,17,-133,19,-133,21,-133,23,-133,24,-133,27,-133,28,-133,30,-133,33,-133,34,-133,36,-133,42,64,43,-133,44,-133,45,-133,46,65,52,-133,66,-133,75,-133,-1,0},
    /*73*/{0,-132,1,-132,3,-132,7,-132,8,-132,9,-132,10,-132,11,-132,12,-132,13,-132,14,-132,17,-132,19,-132,21,-132,23,-132,24,-132,27,-132,28,-132,30,-132,33,-132,34,-132,36,-132,42,64,43,-132,44,-132,45,-132,46,65,52,-132,66,-132,75,-132,-1,0},
    /*74*/{0,-137,1,-137,3,-137,7,-137,8,-137,9,-137,10,-137,11,-137,12,-137,13,-137,14,-137,17,-137,19,59,21,60,23,-137,24,-137,27,-137,28,-137,30,-137,33,-137,34,-137,36,-137,43,61,44,-137,45,62,52,-137,66,-137,75,-137,-1,0},
    /*75*/{0,-108,1,-108,3,-108,6,-108,7,-108,8,-108,9,-108,10,-108,11,-108,12,-108,13,-108,14,-108,16,-108,17,-108,19,-108,20,-108,21,-108,23,-108,24,-108,27,-108,28,-108,29,-108,30,-108,31,-108,32,-108,33,-108,34,-108,35,-108,36,-108,37,-108,39,-108,42,-108,43,-108,44,-108,45,-108,46,-108,47,-108,48,-108,51,-108,52,-108,54,-108,66,-108,75,-108,-1,0},
    /*76*/{1,28,3,17,7,10,9,12,11,2,12,5,14,26,27,15,33,32,34,25,36,8,66,27,75,3,-1,0},
    /*77*/{10,79,13,43,-1,0},
    /*78*/{0,-97,1,-97,3,-97,6,-97,7,-97,8,-97,9,-97,10,-97,11,-97,12,-97,13,-97,14,-97,15,-97,16,-97,17,-97,19,-97,20,-97,21,-97,22,-97,23,-97,24,-97,27,-97,28,-97,29,-97,30,-97,31,-97,32,-97,33,-97,34,-97,35,-97,36,-97,37,-97,38,-97,39,-97,42,-97,43,-97,44,-97,45,-97,46,-97,47,-97,48,-97,51,-97,52,-97,54,-97,66,-97,75,-97,-1,0},
    /*79*/{0,-1,-1,0},
    /*80*/{0,-104,1,-104,3,-104,6,-104,7,-104,8,-104,9,-104,10,-104,11,-104,12,-104,13,-104,14,-104,15,-104,16,-104,17,-104,19,-104,20,-104,21,-104,22,-104,23,-104,24,-104,27,-104,28,-104,29,-104,30,-104,31,-104,32,-104,33,-104,34,-104,35,-104,36,-104,37,-104,38,-104,39,-104,42,-104,43,-104,44,-104,45,-104,46,-104,47,-104,48,-104,51,-104,52,-104,54,-104,66,-104,75,-104,-1,0},
    /*81*/{1,28,3,17,7,10,9,12,11,2,12,5,14,26,27,15,33,32,34,25,36,8,66,27,75,3,-1,0},
    /*82*/{0,-103,1,-103,3,-103,6,-103,7,-103,8,-103,9,-103,10,-103,11,-103,12,-103,13,-103,14,-103,15,-103,16,-103,17,-103,19,-103,20,-103,21,-103,22,-103,23,-103,24,-103,27,-103,28,-103,29,-103,30,-103,31,-103,32,-103,33,-103,34,-103,35,-103,36,-103,37,-103,38,-103,39,-103,42,-103,43,-103,44,-103,45,-103,46,-103,47,-103,48,-103,51,-103,52,-103,54,-103,66,-103,75,-103,-1,0},
    /*83*/{2,93,-1,0},
    /*84*/{3,17,7,10,9,12,11,2,12,5,14,26,27,15,33,32,34,25,36,8,66,27,75,3,-1,0},
    /*85*/{2,87,-1,0},
    /*86*/{0,-101,1,-101,3,-101,6,-101,7,-101,8,-101,9,-101,10,-101,11,-101,12,-101,13,-101,14,-101,15,-101,16,-101,17,-101,19,-101,20,-101,21,-101,22,-101,23,-101,24,-101,27,-101,28,-101,29,-101,30,-101,31,-101,32,-101,33,-101,34,-101,35,-101,36,-101,37,-101,38,-101,39,-101,42,-101,43,-101,44,-101,45,-101,46,-101,47,-101,48,-101,51,-101,52,-101,54,-101,66,-101,75,-101,-1,0},
    /*87*/{10,-105,13,-105,-1,0},
    /*88*/{10,91,13,90,-1,0},
    /*89*/{3,17,7,10,9,12,11,2,12,5,14,26,27,15,33,32,34,25,36,8,66,27,75,3,-1,0},
    /*90*/{0,-100,1,-100,3,-100,6,-100,7,-100,8,-100,9,-100,10,-100,11,-100,12,-100,13,-100,14,-100,15,-100,16,-100,17,-100,19,-100,20,-100,21,-100,22,-100,23,-100,24,-100,27,-100,28,-100,29,-100,30,-100,31,-100,32,-100,33,-100,34,-100,35,-100,36,-100,37,-100,38,-100,39,-100,42,-100,43,-100,44,-100,45,-100,46,-100,47,-100,48,-100,51,-100,52,-100,54,-100,66,-100,75,-100,-1,0},
    /*91*/{10,-106,13,-106,-1,0},
    /*92*/{0,-102,1,-102,3,-102,6,-102,7,-102,8,-102,9,-102,10,-102,11,-102,12,-102,13,-102,14,-102,15,-102,16,-102,17,-102,19,-102,20,-102,21,-102,22,-102,23,-102,24,-102,27,-102,28,-102,29,-102,30,-102,31,-102,32,-102,33,-102,34,-102,35,-102,36,-102,37,-102,38,-102,39,-102,42,-102,43,-102,44,-102,45,-102,46,-102,47,-102,48,-102,51,-102,52,-102,54,-102,66,-102,75,-102,-1,0},
    /*93*/{13,43,23,95,-1,0},
    /*94*/{0,-99,1,-99,3,-99,6,-99,7,-99,8,-99,9,-99,10,-99,11,-99,12,-99,13,-99,14,-99,15,-99,16,-99,17,-99,19,-99,20,-99,21,-99,22,-99,23,-99,24,-99,27,-99,28,-99,29,-99,30,-99,31,-99,32,-99,33,-99,34,-99,35,-99,36,-99,37,-99,38,-99,39,-99,42,-99,43,-99,44,-99,45,-99,46,-99,47,-99,48,-99,51,-99,52,-99,54,-99,66,-99,75,-99,-1,0},
    /*95*/{10,-71,-1,0},
    /*96*/{10,-70,-1,0},
    /*97*/{10,-75,-1,0},
    /*98*/{10,-72,-1,0},
    /*99*/{10,-77,-1,0},
    /*100*/{10,107,-1,0},
    /*101*/{10,-69,-1,0},
    /*102*/{2,106,-1,0},
    /*103*/{10,-74,-1,0},
    /*104*/{10,-73,-1,0},
    /*105*/{10,-76,-1,0},
    /*106*/{3,17,7,10,9,12,11,2,12,5,14,26,27,15,33,32,34,25,36,8,66,27,75,3,-1,0},
    /*107*/{0,-120,1,-120,3,-120,6,-120,7,-120,8,-120,9,-120,10,-120,11,-120,12,-120,13,-120,14,-120,16,-120,17,-120,19,-120,20,-120,21,-120,23,-120,24,-120,27,-120,28,-120,29,-120,30,-120,31,-120,32,-120,33,-120,34,-120,35,-120,36,-120,37,-120,39,-120,42,-120,43,-120,44,-120,45,-120,46,-120,47,-120,48,-120,51,-120,52,-120,54,-120,66,-120,75,-120,-1,0},
    /*108*/{3,-154,7,-154,9,-154,11,-154,12,-154,14,-154,27,-154,33,-154,34,-154,36,-154,66,-154,75,-154,-1,0},
    /*109*/{3,-163,7,-163,9,-163,11,-163,12,-163,14,-163,27,-163,33,-163,34,-163,36,-163,66,-163,75,-163,-1,0},
    /*110*/{3,-158,7,-158,9,-158,11,-158,12,-158,14,-158,27,-158,33,-158,34,-158,36,-158,66,-158,75,-158,-1,0},
    /*111*/{3,-159,7,-159,9,-159,11,-159,12,-159,14,-159,27,-159,33,-159,34,-159,36,-159,66,-159,75,-159,-1,0},
    /*112*/{3,-161,7,-161,9,-161,11,-161,12,-161,14,-161,27,-161,33,-161,34,-161,36,-161,66,-161,75,-161,-1,0},
    /*113*/{3,-157,7,-157,9,-157,11,-157,12,-157,14,-157,27,-157,33,-157,34,-157,36,-157,66,-157,75,-157,-1,0},
    /*114*/{3,-162,7,-162,9,-162,11,-162,12,-162,14,-162,27,-162,33,-162,34,-162,36,-162,66,-162,75,-162,-1,0},
    /*115*/{3,17,7,10,9,12,11,2,12,5,14,26,27,15,33,32,34,25,36,8,66,27,75,3,-1,0},
    /*116*/{3,-153,7,-153,9,-153,11,-153,12,-153,14,-153,27,-153,33,-153,34,-153,36,-153,66,-153,75,-153,-1,0},
    /*117*/{3,-160,7,-160,9,-160,11,-160,12,-160,14,-160,27,-160,33,-160,34,-160,36,-160,66,-160,75,-160,-1,0},
    /*118*/{3,-155,7,-155,9,-155,11,-155,12,-155,14,-155,27,-155,33,-155,34,-155,36,-155,66,-155,75,-155,-1,0},
    /*119*/{3,-156,7,-156,9,-156,11,-156,12,-156,14,-156,27,-156,33,-156,34,-156,36,-156,66,-156,75,-156,-1,0},
    /*120*/{0,-152,10,-152,13,-152,17,-152,23,-152,-1,0},
    /*121*/{0,-109,1,-109,3,-109,6,-109,7,-109,8,-109,9,-109,10,-109,11,-109,12,-109,13,-109,14,-109,16,-109,17,-109,19,-109,20,-109,21,-109,23,-109,24,-109,27,-109,28,-109,29,-109,30,-109,31,-109,32,-109,33,-109,34,-109,35,-109,36,-109,37,-109,39,-109,42,-109,43,-109,44,-109,45,-109,46,-109,47,-109,48,-109,51,-109,52,-109,54,-109,66,-109,75,-109,-1,0},
    /*122*/{0,-111,1,-111,3,-111,6,-111,7,-111,8,-111,9,-111,10,-111,11,-111,12,-111,13,-111,14,-111,16,-111,17,-111,19,-111,20,-111,21,-111,23,-111,24,-111,27,-111,28,-111,29,-111,30,-111,31,-111,32,-111,33,-111,34,-111,35,-111,36,-111,37,-111,39,-111,42,-111,43,-111,44,-111,45,-111,46,-111,47,-111,48,-111,51,-111,52,-111,54,-111,66,-111,75,-111,-1,0},
    /*123*/{1,28,2,100,3,17,7,10,9,12,11,2,12,5,14,26,27,15,33,32,34,25,36,8,56,99,59,97,61,103,63,105,64,102,66,27,67,104,68,96,71,98,75,3,-1,0},
    /*124*/{10,126,-1,0},
    /*125*/{0,-112,1,-112,3,-112,6,-112,7,-112,8,-112,9,-112,10,-112,11,-112,12,-112,13,-112,14,-112,16,-112,17,-112,19,-112,20,-112,21,-112,23,-112,24,-112,27,-112,28,-112,29,-112,30,-112,31,-112,32,-112,33,-112,34,-112,35,-112,36,-112,37,-112,39,-112,42,-112,43,-112,44,-112,45,-112,46,-112,47,-112,48,-112,51,-112,52,-112,54,-112,66,-112,75,-112,-1,0},
  };

  /** access to parse action table */
  public short[][] action_table() {return _action_table;}

  /** reduce_goto table */
  protected static final short[][] _reduce_table = {
    /*0*/{1,19,4,29,5,21,6,13,7,22,8,23,9,8,10,17,11,20,12,18,13,28,25,6,27,12,28,5,52,15,53,3,65,10,66,30,-1,-1},
    /*1*/{-1,-1},
    /*2*/{52,15,53,3,65,122,66,30,-1,-1},
    /*3*/{-1,-1},
    /*4*/{-1,-1},
    /*5*/{-1,-1},
    /*6*/{-1,-1},
    /*7*/{52,15,53,3,65,121,66,30,-1,-1},
    /*8*/{-1,-1},
    /*9*/{-1,-1},
    /*10*/{67,115,-1,-1},
    /*11*/{1,77,4,29,5,21,6,13,7,22,8,23,9,8,10,17,11,20,12,18,13,28,25,6,27,12,28,5,34,100,52,15,53,3,65,10,66,30,-1,-1},
    /*12*/{-1,-1},
    /*13*/{-1,-1},
    /*14*/{-1,-1},
    /*15*/{-1,-1},
    /*16*/{-1,-1},
    /*17*/{-1,-1},
    /*18*/{-1,-1},
    /*19*/{-1,-1},
    /*20*/{-1,-1},
    /*21*/{-1,-1},
    /*22*/{-1,-1},
    /*23*/{-1,-1},
    /*24*/{52,15,53,3,65,75,66,30,-1,-1},
    /*25*/{-1,-1},
    /*26*/{-1,-1},
    /*27*/{-1,-1},
    /*28*/{1,41,4,29,5,21,6,13,7,22,8,23,9,8,10,17,11,20,12,18,13,28,25,6,27,12,28,5,52,15,53,3,65,10,66,30,-1,-1},
    /*29*/{-1,-1},
    /*30*/{25,33,52,15,53,3,65,32,66,30,-1,-1},
    /*31*/{-1,-1},
    /*32*/{-1,-1},
    /*33*/{-1,-1},
    /*34*/{25,39,52,15,53,3,65,32,66,30,-1,-1},
    /*35*/{25,38,52,15,53,3,65,32,66,30,-1,-1},
    /*36*/{25,37,52,15,53,3,65,32,66,30,-1,-1},
    /*37*/{-1,-1},
    /*38*/{-1,-1},
    /*39*/{-1,-1},
    /*40*/{4,29,5,21,6,13,7,22,8,23,9,8,10,17,11,20,12,46,25,6,52,15,53,3,65,32,66,30,-1,-1},
    /*41*/{-1,-1},
    /*42*/{4,29,5,21,6,13,7,22,8,23,9,8,10,17,11,20,12,18,13,28,25,6,27,12,28,45,52,15,53,3,65,10,66,30,-1,-1},
    /*43*/{4,29,5,21,6,13,7,22,8,23,9,8,10,17,11,20,12,18,13,28,25,6,27,44,52,15,53,3,65,32,66,30,-1,-1},
    /*44*/{-1,-1},
    /*45*/{-1,-1},
    /*46*/{-1,-1},
    /*47*/{4,29,5,21,6,13,7,22,8,23,9,8,10,17,11,48,25,6,52,15,53,3,65,32,66,30,-1,-1},
    /*48*/{-1,-1},
    /*49*/{4,29,5,21,6,13,7,22,8,23,9,8,10,50,25,6,52,15,53,3,65,32,66,30,-1,-1},
    /*50*/{-1,-1},
    /*51*/{4,29,5,21,6,13,7,22,8,23,9,52,25,6,52,15,53,3,65,32,66,30,-1,-1},
    /*52*/{-1,-1},
    /*53*/{4,29,5,21,6,13,7,22,8,54,25,6,52,15,53,3,65,32,66,30,-1,-1},
    /*54*/{-1,-1},
    /*55*/{4,29,5,21,6,13,7,74,25,6,52,15,53,3,65,32,66,30,-1,-1},
    /*56*/{4,29,5,21,6,13,7,57,25,6,52,15,53,3,65,32,66,30,-1,-1},
    /*57*/{-1,-1},
    /*58*/{4,29,5,21,6,73,25,6,52,15,53,3,65,32,66,30,-1,-1},
    /*59*/{4,29,5,21,6,72,25,6,52,15,53,3,65,32,66,30,-1,-1},
    /*60*/{4,29,5,21,6,71,25,6,52,15,53,3,65,32,66,30,-1,-1},
    /*61*/{4,29,5,21,6,62,25,6,52,15,53,3,65,32,66,30,-1,-1},
    /*62*/{-1,-1},
    /*63*/{4,29,5,70,25,6,52,15,53,3,65,32,66,30,-1,-1},
    /*64*/{4,29,5,65,25,6,52,15,53,3,65,32,66,30,-1,-1},
    /*65*/{-1,-1},
    /*66*/{4,69,25,6,52,15,53,3,65,32,66,30,-1,-1},
    /*67*/{4,68,25,6,52,15,53,3,65,32,66,30,-1,-1},
    /*68*/{-1,-1},
    /*69*/{-1,-1},
    /*70*/{-1,-1},
    /*71*/{-1,-1},
    /*72*/{-1,-1},
    /*73*/{-1,-1},
    /*74*/{-1,-1},
    /*75*/{-1,-1},
    /*76*/{1,77,4,29,5,21,6,13,7,22,8,23,9,8,10,17,11,20,12,18,13,28,25,6,27,12,28,5,52,15,53,3,65,10,66,30,-1,-1},
    /*77*/{-1,-1},
    /*78*/{-1,-1},
    /*79*/{-1,-1},
    /*80*/{-1,-1},
    /*81*/{1,93,4,29,5,21,6,13,7,22,8,23,9,8,10,17,11,20,12,18,13,28,25,6,27,12,28,5,52,15,53,3,65,10,66,30,-1,-1},
    /*82*/{-1,-1},
    /*83*/{-1,-1},
    /*84*/{4,29,5,21,6,13,7,22,8,23,9,8,10,17,11,20,12,18,13,28,25,6,27,12,28,87,32,88,52,15,53,3,65,10,66,30,-1,-1},
    /*85*/{-1,-1},
    /*86*/{-1,-1},
    /*87*/{-1,-1},
    /*88*/{-1,-1},
    /*89*/{4,29,5,21,6,13,7,22,8,23,9,8,10,17,11,20,12,18,13,28,25,6,27,12,28,91,52,15,53,3,65,10,66,30,-1,-1},
    /*90*/{-1,-1},
    /*91*/{-1,-1},
    /*92*/{-1,-1},
    /*93*/{-1,-1},
    /*94*/{-1,-1},
    /*95*/{-1,-1},
    /*96*/{-1,-1},
    /*97*/{-1,-1},
    /*98*/{-1,-1},
    /*99*/{-1,-1},
    /*100*/{-1,-1},
    /*101*/{-1,-1},
    /*102*/{-1,-1},
    /*103*/{-1,-1},
    /*104*/{-1,-1},
    /*105*/{-1,-1},
    /*106*/{25,107,52,15,53,3,65,32,66,30,-1,-1},
    /*107*/{-1,-1},
    /*108*/{-1,-1},
    /*109*/{-1,-1},
    /*110*/{-1,-1},
    /*111*/{-1,-1},
    /*112*/{-1,-1},
    /*113*/{-1,-1},
    /*114*/{-1,-1},
    /*115*/{4,29,5,21,6,13,7,22,8,23,9,8,10,17,11,20,12,18,13,28,25,6,27,12,28,120,52,15,53,3,65,10,66,30,-1,-1},
    /*116*/{-1,-1},
    /*117*/{-1,-1},
    /*118*/{-1,-1},
    /*119*/{-1,-1},
    /*120*/{-1,-1},
    /*121*/{-1,-1},
    /*122*/{-1,-1},
    /*123*/{1,77,4,29,5,21,6,13,7,22,8,23,9,8,10,17,11,20,12,18,13,28,25,6,27,12,28,5,34,124,52,15,53,3,65,10,66,30,-1,-1},
    /*124*/{-1,-1},
    /*125*/{-1,-1},
  };

  /** access to reduce_goto table */
  public short[][] reduce_table() {return _reduce_table;}

  /** instance of action encapsulation class */
  protected CUP$Grm$actions action_obj;

  /** action encapsulation object initializer */
  protected void init_actions()
    {
      action_obj = new CUP$Grm$actions();
    }

  /** invoke a user supplied parse action */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Grm$do_action(act_num, parser, stack, top);
  }

  /** start state */
  public int start_state() {return 0;}
  /** start production */
  public int start_production() {return 0;}

  /** EOF Symbol index */
  public int EOF_sym() {return 0;}

  /** error Symbol index */
  public int error_sym() {return 1;}


  /** scan to get the next Symbol */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.nextToken(); 
    }

 
  Lexer lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error (" + current.sym + ")", current);
  }

  ErrorMsg.ErrorMsg errorMsg;

  public void report_error(String message, java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

  public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Grm$actions {

 static Symbol.Symbol sym(String s) {
	         return Symbol.Symbol.symbol(s);
	        }
	    

  /** Constructor */
  CUP$Grm$actions() { }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Grm$do_action(
    int                        CUP$Grm$act_num,
    java_cup.runtime.lr_parser CUP$Grm$parser,
    java.util.Stack            CUP$Grm$stack,
    int                        CUP$Grm$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Grm$result;

      /* select the action based on the action number */
      switch (CUP$Grm$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // assignment_operator ::= BWISEORASSIGN 
            {
              Absyn.OpExp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.OpExp(eleft,20);
              CUP$Grm$result = new java_cup.runtime.Symbol(67/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // assignment_operator ::= BWISEXORASSIGN 
            {
              Absyn.OpExp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.OpExp(eleft,19);
              CUP$Grm$result = new java_cup.runtime.Symbol(67/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // assignment_operator ::= BWISEAND 
            {
              Absyn.OpExp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.OpExp(eleft,18);
              CUP$Grm$result = new java_cup.runtime.Symbol(67/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // assignment_operator ::= RSHIFTASSIGN 
            {
              Absyn.OpExp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.OpExp(eleft,17);
              CUP$Grm$result = new java_cup.runtime.Symbol(67/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // assignment_operator ::= LSHIFTASSIGN 
            {
              Absyn.OpExp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.OpExp(eleft,16);
              CUP$Grm$result = new java_cup.runtime.Symbol(67/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // assignment_operator ::= SUBASSIGN 
            {
              Absyn.OpExp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.OpExp(eleft,15);
              CUP$Grm$result = new java_cup.runtime.Symbol(67/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // assignment_operator ::= ADDASSIGN 
            {
              Absyn.OpExp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.OpExp(eleft,14);
              CUP$Grm$result = new java_cup.runtime.Symbol(67/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // assignment_operator ::= MODASSIGN 
            {
              Absyn.OpExp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.OpExp(eleft,13);
              CUP$Grm$result = new java_cup.runtime.Symbol(67/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // assignment_operator ::= DIVASSIGN 
            {
              Absyn.OpExp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.OpExp(eleft,12);
              CUP$Grm$result = new java_cup.runtime.Symbol(67/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // assignment_operator ::= MULASSIGN 
            {
              Absyn.OpExp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.OpExp(eleft,11);
              CUP$Grm$result = new java_cup.runtime.Symbol(67/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // assignment_operator ::= ASSIGN 
            {
              Absyn.OpExp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.OpExp(eleft,10);
              CUP$Grm$result = new java_cup.runtime.Symbol(67/*assignment_operator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // assignment_expression ::= unary_expression assignment_operator assignment_expression 
            {
              Absyn.AssignExp RESULT = null;
		 // if only "=" supported:
         RESULT = new Absyn.AssignExp(@1left, (Absyn.Var)$1, (Absyn.Exp)$3);
      
              CUP$Grm$result = new java_cup.runtime.Symbol(28/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // assignment_expression ::= conditional_expression 
            {
              Absyn.AssignExp RESULT = null;
		 RESULT = (Absyn.Exp)$1; 
              CUP$Grm$result = new java_cup.runtime.Symbol(28/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // conditional_expression ::= logical_OR_expression expression COLON conditional_expression 
            {
              Absyn.CondExp RESULT = null;
		
         RESULT = new Absyn.CondExp(@1left,
                                    (Absyn.Exp)$1,
                                    (Absyn.Exp)$3,
                                    (Absyn.Exp)$5);
      
              CUP$Grm$result = new java_cup.runtime.Symbol(27/*conditional_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // conditional_expression ::= logical_OR_expression 
            {
              Absyn.CondExp RESULT = null;
		 RESULT = (Absyn.Exp)$1; 
              CUP$Grm$result = new java_cup.runtime.Symbol(27/*conditional_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // logical_OR_expression ::= logical_OR_expression OR logical_AND_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.BinOp(e1left, e1, 0, e2);
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*logical_OR_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // logical_OR_expression ::= logical_AND_expression 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*logical_OR_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // logical_AND_expression ::= logical_AND_expression AND inclusive_OR_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.BinOp(e1left, e1, 1, e2);
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*logical_AND_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // logical_AND_expression ::= inclusive_OR_expression 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(12/*logical_AND_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // inclusive_OR_expression ::= inclusive_OR_expression BWISEOR exclusive_OR_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.BinOp(e1left, e1, 2, e2);
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*inclusive_OR_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // inclusive_OR_expression ::= exclusive_OR_expression 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(11/*inclusive_OR_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // exclusive_OR_expression ::= exclusive_OR_expression BWISEXOR AND_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.BinOp(e1left, e1, 3, e2);
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*exclusive_OR_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // exclusive_OR_expression ::= AND_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.BinOp(e1left, e1);
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*exclusive_OR_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // AND_expression ::= AND_expression BITWISEAND equality_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.BinOp(e1left, e1, 4, e2);
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*AND_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // AND_expression ::= equality_expression 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(9/*AND_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // equality_expression ::= equality_expression NEQ relational_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.BinOp(e1left, e1, 6, e2)
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*equality_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // equality_expression ::= equality_expression EQ relational_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.BinOp(e1left, e1, 5, e2)
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*equality_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // equality_expression ::= relational_expression 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(8/*equality_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // relational_expression ::= relational_expression GE shift_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.BinOp(e1left, e1, 10, e2)
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // relational_expression ::= relational_expression LE shift_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.BinOp(e1left, e1, 9, e2)
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // relational_expression ::= relational_expression GT shift_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.BinOp(e1left, e1, 8, e2)
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // relational_expression ::= relational_expression LT shift_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.BinOp(e1left, e1, 7, e2)
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // relational_expression ::= shift_expression 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(7/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // shift_expression ::= shift_expression RSHIFT additive_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.BinOp(e1left, e1, 12, e2)
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*shift_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // shift_expression ::= shift_expression LSHIFT additive_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.BinOp(e1left, e1, 11, e2)
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*shift_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // shift_expression ::= additive_expression 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(6/*shift_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // additive_expression ::= additive_expression MINUS multiplicative_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.BinOp(e1left, e1, 14, e2)
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*additive_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // additive_expression ::= additive_expression PLUS multiplicative_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.BinOp(e1left, e1, 13, e2)
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*additive_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // additive_expression ::= multiplicative_expression 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(5/*additive_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // multiplicative_expression ::= multiplicative_expression MODULUS cast_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.CastExp e2 = (Absyn.CastExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.BinOp(e1left, e1, 17, e2)
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*multiplicative_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // multiplicative_expression ::= multiplicative_expression DIVIDE cast_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.CastExp e2 = (Absyn.CastExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.BinOp(e1left, e1, 16, e2)
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*multiplicative_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // multiplicative_expression ::= multiplicative_expression TIMES cast_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.CastExp e2 = (Absyn.CastExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.BinOp(e1left, e1, 15, e2)
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*multiplicative_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // multiplicative_expression ::= cast_expression 
            {
              Absyn.Exp RESULT = null;
		 RESULT = (Absyn.Exp)$1; 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*multiplicative_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // cast_expression ::= LPAREN type_name RPAREN cast_expression 
            {
              Absyn.CastExp RESULT = null;
		 RESULT = new Absyn.CastExp(@1left, (Absyn.Ty)$2, (Absyn.Exp)$4); 
              CUP$Grm$result = new java_cup.runtime.Symbol(25/*cast_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // cast_expression ::= unary_expression 
            {
              Absyn.CastExp RESULT = null;
		 RESULT = (Absyn.Exp)$1; 
              CUP$Grm$result = new java_cup.runtime.Symbol(25/*cast_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // unary_operator ::= TILDE 
            {
              Absyn.UnaryOps RESULT = null;
		 RESULT = new Absyn.UnaryOps(eleft, 4) 
              CUP$Grm$result = new java_cup.runtime.Symbol(66/*unary_operator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // unary_operator ::= MINUS 
            {
              Absyn.UnaryOps RESULT = null;
		 RESULT = new Absyn.UnaryOps(eleft, 3) 
              CUP$Grm$result = new java_cup.runtime.Symbol(66/*unary_operator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // unary_operator ::= PLUS 
            {
              Absyn.UnaryOps RESULT = null;
		 RESULT = new Absyn.UnaryOps(eleft, 2)
              CUP$Grm$result = new java_cup.runtime.Symbol(66/*unary_operator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // unary_operator ::= TIMES 
            {
              Absyn.UnaryOps RESULT = null;
		 RESULT = new Absyn.UnaryOps(eleft, 1) 
              CUP$Grm$result = new java_cup.runtime.Symbol(66/*unary_operator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // unary_operator ::= BITWISEAND 
            {
              Absyn.UnaryOps RESULT = null;
		 RESULT = new Absyn.UnaryOps(eleft, 5)
              CUP$Grm$result = new java_cup.runtime.Symbol(66/*unary_operator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // unary_operator ::= AMPERSAND 
            {
              Absyn.UnaryOps RESULT = null;
		 RESULT = new Absyn.UnaryOps(eleft, 0)
              CUP$Grm$result = new java_cup.runtime.Symbol(66/*unary_operator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // unary_expression ::= SIZEOF LPAREN type_name RPAREN 
            {
              Absyn.UnaryExp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.NameTy e = (Absyn.NameTy)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.UnaryExp(eleft, 2, e)
              CUP$Grm$result = new java_cup.runtime.Symbol(65/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // unary_expression ::= SIZEOF unary_expression 
            {
              Absyn.UnaryExp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.UnaryExp e = (Absyn.UnaryExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.UnaryExp(eleft, 2, e)
              CUP$Grm$result = new java_cup.runtime.Symbol(65/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // unary_expression ::= unary_operator cast_expression 
            {
              Absyn.UnaryExp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(65/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // unary_expression ::= DECREMENT unary_expression 
            {
              Absyn.UnaryExp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.UnaryExp e = (Absyn.UnaryExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.UnaryExp(eleft, e, 1)
              CUP$Grm$result = new java_cup.runtime.Symbol(65/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // unary_expression ::= INCREMENT unary_expression 
            {
              Absyn.UnaryExp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.UnaryExp e = (Absyn.UnaryExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.UnaryExp(eleft, e, 0)
              CUP$Grm$result = new java_cup.runtime.Symbol(65/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // unary_expression ::= postfix_expression 
            {
              Absyn.UnaryExp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(65/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // argument_expression_list ::= argument_expression_list COMMA assignment_expression 
            {
              Absyn.ArgExpList RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.ArgExpList e1 = (Absyn.ArgExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.AssignExp e2 = (Absyn.AssignExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.ArgExpList(e1left, e1, e2)
              CUP$Grm$result = new java_cup.runtime.Symbol(32/*argument_expression_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // argument_expression_list ::= assignment_expression 
            {
              Absyn.ArgExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.AssignExp e = (Absyn.AssignExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.ArgExpList(eleft, e)
              CUP$Grm$result = new java_cup.runtime.Symbol(32/*argument_expression_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // postfix_expression ::= postfix_expression DECREMENT 
            {
              Absyn.PostFixExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.PostFixExp e1 = (Absyn.PostFixExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.UnaryExp(e1left, e1, 1) 
              CUP$Grm$result = new java_cup.runtime.Symbol(52/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // postfix_expression ::= postfix_expression INCREMENT 
            {
              Absyn.PostFixExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.PostFixExp e1 = (Absyn.PostFixExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.UnaryExp(e1left, e1, 0) 
              CUP$Grm$result = new java_cup.runtime.Symbol(52/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // postfix_expression ::= postfix_expression ARROW ID 
            {
              Absyn.PostFixExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.PostFixExp e1 = (Absyn.PostFixExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		RESULT = new Absyn.PostFixExp(e1left, e1, 4)
              CUP$Grm$result = new java_cup.runtime.Symbol(52/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // postfix_expression ::= postfix_expression PERIOD ID 
            {
              Absyn.PostFixExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.PostFixExp e1 = (Absyn.PostFixExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		RESULT = new Absyn.PostFixExp(e1left, e1, 3)
              CUP$Grm$result = new java_cup.runtime.Symbol(52/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // postfix_expression ::= postfix_expression LPAREN argument_expression_list RPAREN 
            {
              Absyn.PostFixExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.PostFixExp e1 = (Absyn.PostFixExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.ArgExpList e2 = (Absyn.ArgExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = new Absyn.PostFixExp(e1left, e1, 2, e2)
              CUP$Grm$result = new java_cup.runtime.Symbol(52/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // postfix_expression ::= postfix_expression LBRACK expression RBRACK 
            {
              Absyn.PostFixExp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.PostFixExp e1 = (Absyn.PostFixExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = new Absyn.PostFixExp(e1left, e1, 1, e2)
              CUP$Grm$result = new java_cup.runtime.Symbol(52/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // postfix_expression ::= primary_expression 
            {
              Absyn.PostFixExp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.PrimaryExp e = (Absyn.PrimaryExp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.PostFixExp(eleft, e, 0)
              CUP$Grm$result = new java_cup.runtime.Symbol(52/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // primary_expression ::= LPAREN expression RPAREN 
            {
              Absyn.PrimaryExp RESULT = null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.PrimaryExp(lpleft, e)
              CUP$Grm$result = new java_cup.runtime.Symbol(53/*primary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // primary_expression ::= STRING_LITERAL 
            {
              Absyn.PrimaryExp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.PrimaryExp(eleft, e)
              CUP$Grm$result = new java_cup.runtime.Symbol(53/*primary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // primary_expression ::= CONST 
            {
              Absyn.PrimaryExp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.PrimaryExp(eleft, e)
              CUP$Grm$result = new java_cup.runtime.Symbol(53/*primary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // typedef_name ::= identifier 
            {
              Absyn.TypeDefName RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.IdentifierList e = (Absyn.IdentifierList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.TypeDefName(eleft,e)
              CUP$Grm$result = new java_cup.runtime.Symbol(56/*typedef_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // identifier_list ::= identifier_list identifier 
            {
              Absyn.IdentifierList RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.IdentifierList e1 = (Absyn.IdentifierList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.IdentifierList e2 = (Absyn.IdentifierList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IdentifierList(e1left, e1, e2) 
              CUP$Grm$result = new java_cup.runtime.Symbol(35/*identifier_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // identifier_list ::= identifier 
            {
              Absyn.IdentifierList RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.IdentifierList e1 = (Absyn.IdentifierList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IdentifierList(e1left, e1) 
              CUP$Grm$result = new java_cup.runtime.Symbol(35/*identifier_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // type_parameters ::= LBRACE initializer_list RBRACE 
            {
              Absyn.ParamList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.InitializerList e = (Absyn.InitializerList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = new Absyn.Initializer(eleft,e)
              CUP$Grm$result = new java_cup.runtime.Symbol(50/*type_parameters*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // type_parameters ::= LPAREN RPAREN 
            {
              Absyn.ParamList RESULT = null;
		 RESULT = new Absyn.ParamList(@1left) :;};


parameter_list	::= type_name
		| parameter_list COMMA type name;

type_qualifier  ::= CONST
            | VOLATILE;

parameter_type_list	::= type
			| parameter_type_list COMMA type;

initializer_list	::= initializer
			| initializer_list COMMA initializer;

initializer		::= assignment_expression:e
				{:RESULT = new Absyn.Initializer(eleft,e)
              CUP$Grm$result = new java_cup.runtime.Symbol(50/*type_parameters*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // type_parameters ::= LPAREN parameter_type_list RPAREN 
            {
              Absyn.ParamList RESULT = null;
		 RESULT = new Absyn.ParamList(@1left, (Absyn.ParamTypeList)$2) :;}
		| LPAREN parameter_type_list COMMA ELIPSIS RPAREN
		{: RESULT = new Absyn.ParamList(@1left,
                                       (Absyn.ParamTypeList)$2, true); 
              CUP$Grm$result = new java_cup.runtime.Symbol(50/*type_parameters*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // struct_or_union ::= UNION 
            {
              Absyn.StructOrUnion RESULT = null;
		 RESULT = new Absyn.StructOrUnion(@1left, $1); 
              CUP$Grm$result = new java_cup.runtime.Symbol(59/*struct_or_union*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // struct_or_union ::= STRUCT 
            {
              Absyn.StructOrUnion RESULT = null;
		 RESULT = new Absyn.Enumerator(@1left, $1); 
              CUP$Grm$result = new java_cup.runtime.Symbol(59/*struct_or_union*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // struct_declaration_list ::= struct_declaration_list type name SEMICOLON 
            {
              Absyn.StructDeclarationList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(58/*struct_declaration_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // struct_declaration_list ::= type name SEMICOLON 
            {
              Absyn.StructDeclarationList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(58/*struct_declaration_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // enumerator ::= ID ASSIGN constant_expression 
            {
              Absyn.Enumerator RESULT = null;
		 RESULT = new Absyn.Enumerator(@1left, $1, (Absyn.Exp)$3); 
              CUP$Grm$result = new java_cup.runtime.Symbol(61/*enumerator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // enumerator ::= ID 
            {
              Absyn.Enumerator RESULT = null;
		 RESULT = new Absyn.Enumerator(@1left, $1); 
              CUP$Grm$result = new java_cup.runtime.Symbol(61/*enumerator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // enumerator_list ::= enumerator_list COMMA enumerator 
            {
              Absyn.EnumeratorList RESULT = null;
		 RESULT = new Absyn.EnumeratorList(@1left,
                                           (Absyn.Enumerator)$3,
                                           (Absyn.EnumeratorList)$1); 
              CUP$Grm$result = new java_cup.runtime.Symbol(62/*enumerator_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // enumerator_list ::= enumerator 
            {
              Absyn.EnumeratorList RESULT = null;
		 RESULT = new Absyn.EnumeratorList(@1left, (Absyn.Enumerator)$1); 
              CUP$Grm$result = new java_cup.runtime.Symbol(62/*enumerator_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // struct_or_union_declarator ::= LBRACE struct_declaration_list RBRACE 
            {
              Absyn.StructOrUnionDeclarator RESULT = null;
		 RESULT = new Absyn.StructOrUnionDeclarator(@1left, (Absyn.StructDeclList)$2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(60/*struct_or_union_declarator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // initialization ::= ASSIGN initializer 
            {
              Absyn.Initialization RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(37/*initialization*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // initialization ::= 
            {
              Absyn.Initialization RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(37/*initialization*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // type_name ::= ID 
            {
              Absyn.NameTy RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.NameTy(eleft, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // type_name ::= ENUM ID 
            {
              Absyn.NameTy RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.NameTy(eleft, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // type_name ::= DOUBLE 
            {
              Absyn.NameTy RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.NameTy(eleft, e) ;
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // type_name ::= FLOAT 
            {
              Absyn.NameTy RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.NameTy(eleft, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // type_name ::= LONG 
            {
              Absyn.NameTy RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.NameTy(eleft, e);
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // type_name ::= INT 
            {
              Absyn.NameTy RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.NameTy(eleft, e);
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // type_name ::= SHORT 
            {
              Absyn.NameTy RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.NameTy(eleft, e);
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // type_name ::= CHAR 
            {
              Absyn.NameTy RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.NameTy(eleft, e);
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // type_name ::= VOID 
            {
              Absyn.NameTy RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.NameTy(eleft, e);
              CUP$Grm$result = new java_cup.runtime.Symbol(34/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // pointer_list ::= pointer_list TIMES 
            {
              Absyn.PointerList RESULT = null;
		
         int prev = ((Integer)$1).intValue();
         RESULT = Integer.valueOf(prev + 1);
      
              CUP$Grm$result = new java_cup.runtime.Symbol(51/*pointer_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // pointer_list ::= TIMES 
            {
              Absyn.PointerList RESULT = null;
		 RESULT = Integer.valueOf(1); 
              CUP$Grm$result = new java_cup.runtime.Symbol(51/*pointer_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // brackets_list ::= expression_array_type_list 
            {
              Absyn.BracketsList RESULT = null;
		 RESULT = new Absyn.BracketsList((Absyn.ExpList)$1); 
              CUP$Grm$result = new java_cup.runtime.Symbol(24/*brackets_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // brackets_list ::= empty_array_type_list 
            {
              Absyn.BracketsList RESULT = null;
		 RESULT = new Absyn.BracketsList(((Absyn.EmptyArrayTypeList)$1).count); 
              CUP$Grm$result = new java_cup.runtime.Symbol(24/*brackets_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // type_augments ::= pointer_list brackets_list 
            {
              Absyn.TypeAugments RESULT = null;
		 RESULT = new Absyn.TypeAugments(((Integer)$1).intValue(),
                                         (Absyn.BracketsList)$2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(57/*type_augments*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // type_augments ::= brackets_list 
            {
              Absyn.TypeAugments RESULT = null;
		 RESULT = new Absyn.TypeAugments((Absyn.BracketsList)$1); 
              CUP$Grm$result = new java_cup.runtime.Symbol(57/*type_augments*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // type_augments ::= pointer_list 
            {
              Absyn.TypeAugments RESULT = null;
		 RESULT = new Absyn.TypeAugments(((Integer)$1).intValue()); 
              CUP$Grm$result = new java_cup.runtime.Symbol(57/*type_augments*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // type_qualifier_list ::= type_qualifier_list type_qualifier 
            {
              Absyn.TypeQualifierList RESULT = null;
		 RESULT = new Absyn.TypeQualifierList((String)$2, (Absyn.TypeQualifierList)$1); 
              CUP$Grm$result = new java_cup.runtime.Symbol(63/*type_qualifier_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // type_qualifier_list ::= type_qualifier 
            {
              Absyn.TypeQualifierList RESULT = null;
		 RESULT = new Absyn.TypeQualifierList((String)$1); 
              CUP$Grm$result = new java_cup.runtime.Symbol(63/*type_qualifier_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // type ::= type_name 
            {
              Absyn.Ty RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(54/*type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type ::= type_name type_augments 
            {
              Absyn.Ty RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(54/*type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression_array_type ::= LBRACK constant_expression RBRACK 
            {
              Absyn.ArrayTy RESULT = null;
		 RESULT = (Absyn.Exp)$2; 
              CUP$Grm$result = new java_cup.runtime.Symbol(18/*expression_array_type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression_array_type_list ::= expression_array_type_list expression_array_type 
            {
              Absyn.ExpressionArrayTypeList RESULT = null;
		RESULT = new Absyn.ExpList((Absyn.Exp)$2, (Absyn.ExpList)$1); 
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*expression_array_type_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression_array_type_list ::= expression_array_type 
            {
              Absyn.ExpressionArrayTypeList RESULT = null;
		 RESULT = new Absyn.ExpList((Absyn.Exp)$1, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*expression_array_type_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // empty_array_type ::= LBRACK RBRACK 
            {
              Absyn.ExpressionArrayType RESULT = null;
		 RESULT = new Absyn.EmptyArrayType(e1left) 
              CUP$Grm$result = new java_cup.runtime.Symbol(20/*empty_array_type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // empty_array_type_list ::= empty_array_type_list empty_array_type 
            {
              Absyn.EmptyArrayTypeList RESULT = null;
		
         Absyn.EmptyArrayTypeList prev = (Absyn.EmptyArrayTypeList)$1;
         RESULT = new Absyn.EmptyArrayTypeList(prev.count + 1);
      
              CUP$Grm$result = new java_cup.runtime.Symbol(19/*empty_array_type_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // empty_array_type_list ::= empty_array_type 
            {
              Absyn.EmptyArrayTypeList RESULT = null;
		 RESULT = new Absyn.EmptyArrayTypeList(1); 
              CUP$Grm$result = new java_cup.runtime.Symbol(19/*empty_array_type_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bitfield_value ::= REGISTER 
            {
              Absyn.BitFieldValue RESULT = null;
		 RESULT = new Absyn.BitfieldValue(e1left, e1) 
              CUP$Grm$result = new java_cup.runtime.Symbol(23/*bitfield_value*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bitfield_value ::= AUTO 
            {
              Absyn.BitFieldValue RESULT = null;
		 RESULT = new Absyn.BitfieldValue(e1left, e1) 
              CUP$Grm$result = new java_cup.runtime.Symbol(23/*bitfield_value*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // bitfield_value ::= STATIC 
            {
              Absyn.BitFieldValue RESULT = null;
		 RESULT = new Absyn.BitfieldValue(e1left, e1) 
              CUP$Grm$result = new java_cup.runtime.Symbol(23/*bitfield_value*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // bitfield_value ::= EXTERN 
            {
              Absyn.BitFieldValue RESULT = null;
		 RESULT = new Absyn.BitfieldValue(e1left, e1) 
              CUP$Grm$result = new java_cup.runtime.Symbol(23/*bitfield_value*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // bitfield_value ::= VOLATILE 
            {
              Absyn.BitFieldValue RESULT = null;
		 RESULT = new Absyn.BitfieldValue(e1left, e1) 
              CUP$Grm$result = new java_cup.runtime.Symbol(23/*bitfield_value*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // bitfield_value ::= CONST 
            {
              Absyn.BitFieldValue RESULT = null;
		RESULT = new Absyn.BitfieldValue(e1left, e1)
              CUP$Grm$result = new java_cup.runtime.Symbol(23/*bitfield_value*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // bitfield_list ::= bitfield_value bitfield_list 
            {
              Absyn.BitFieldList RESULT = null;
		 RESULT = new Absyn.BitfieldList(e1left, e1, e2) 
              CUP$Grm$result = new java_cup.runtime.Symbol(22/*bitfield_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // bitfield_list ::= 
            {
              Absyn.BitFieldList RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(22/*bitfield_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // name ::= ID 
            {
              Absyn.Name RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT=new Absyn.Name(e1left,e1)
              CUP$Grm$result = new java_cup.runtime.Symbol(33/*name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // iteration_statement ::= FOR LPAREN expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RPAREN statement 
            {
              Absyn.IterStmt RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		Absyn.Exp i1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int ic1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int ic1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp ic1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Statement s1 = (Absyn.Statement)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.IterStmt(i1left, i1,e1,ic1, s1);
              CUP$Grm$result = new java_cup.runtime.Symbol(41/*iteration_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // iteration_statement ::= DO statement WHILE LPAREN expression RPAREN SEMICOLON 
            {
              Absyn.IterStmt RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Absyn.Statement s1 = (Absyn.Statement)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		RESULT = new Absyn.IterStmt(s1left, s1, e1);
              CUP$Grm$result = new java_cup.runtime.Symbol(41/*iteration_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // iteration_statement ::= WHILE LPAREN expression RPAREN statement 
            {
              Absyn.IterStmt RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Statement s1 = (Absyn.Statement)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.IterStmt(e1left, e1, s1);
              CUP$Grm$result = new java_cup.runtime.Symbol(41/*iteration_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // selection_statement ::= SWITCH LPAREN expression RPAREN statement 
            {
              Absyn.SelectStmt RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Statement e2 = (Absyn.Statement)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.SelectStmt(e1left, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(43/*selection_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // selection_statement ::= IF LPAREN expression RPAREN statement ELSE statement 
            {
              Absyn.SelectStmt RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Statement e2 = (Absyn.Statement)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Statement e3 = (Absyn.Statement)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.SelectStmt(e1left, e1, e2, e3) ;
              CUP$Grm$result = new java_cup.runtime.Symbol(43/*selection_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // selection_statement ::= IF LPAREN expression RPAREN statement 
            {
              Absyn.SelectStmt RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Statement e2 = (Absyn.Statement)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.SelectStmt(e1left, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(43/*selection_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression_opt ::= expression 
            {
              Absyn.Exp RESULT = null;
		 RESULT = (Absyn.Exp)$1; 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*expression_opt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression_opt ::= 
            {
              Absyn.Exp RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*expression_opt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression_statement ::= expression_opt SEMICOLON 
            {
              Absyn.ExpressionStmt RESULT = null;
		 RESULT = new Absyn.ExpressionStmt(@1left, (Absyn.Exp)$1); 
              CUP$Grm$result = new java_cup.runtime.Symbol(47/*expression_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement_list ::= statement_list statement 
            {
              Absyn.StmtList RESULT = null;
		 RESULT = new Absyn.StmtList(eleft, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(44/*statement_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement_list ::= statement 
            {
              Absyn.StmtList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Statement e = (Absyn.Statement)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.StmtList(eleft, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(44/*statement_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement_list_opt ::= statement_list 
            {
              Absyn.StmtList RESULT = null;
		 RESULT = (Absyn.StmtList)$1; 
              CUP$Grm$result = new java_cup.runtime.Symbol(46/*statement_list_opt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement_list_opt ::= 
            {
              Absyn.StmtList RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(46/*statement_list_opt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaration_list ::= declaration_list declaration 
            {
              Absyn.DecList RESULT = null;
		 RESULT = new Absyn.DecList((Absyn.Dec)$2, (Absyn.DecList)$1); 
              CUP$Grm$result = new java_cup.runtime.Symbol(30/*declaration_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaration_list ::= declaration 
            {
              Absyn.DecList RESULT = null;
		 RESULT = new Absyn.DecList((Absyn.Dec)$1, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(30/*declaration_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaration_list_opt ::= declaration_list 
            {
              Absyn.DecList RESULT = null;
		 RESULT = (Absyn.DecList)$1; 
              CUP$Grm$result = new java_cup.runtime.Symbol(31/*declaration_list_opt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaration_list_opt ::= 
            {
              Absyn.DecList RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(31/*declaration_list_opt*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // compound_statement ::= LBRACE declaration_list_opt statement_list_opt RBRACE 
            {
              Absyn.CompoundStmt RESULT = null;
		 RESULT = new Absyn.CompoundStmt(@1left, (Absyn.DecList)$2, (Absyn.StmtList)$3); 
              CUP$Grm$result = new java_cup.runtime.Symbol(26/*compound_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // labeled_statement ::= DEFAULT COLON statement 
            {
              Absyn.LabeledStmt RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Statement e2 = (Absyn.Statement)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.LabeledStmt(e1left, e1, e2)
              CUP$Grm$result = new java_cup.runtime.Symbol(42/*labeled_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // labeled_statement ::= CASE constant_expression COLON statement 
            {
              Absyn.LabeledStmt RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Statement e2 = (Absyn.Statement)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.LabeledStmt(e1left, e1, e2)
              CUP$Grm$result = new java_cup.runtime.Symbol(42/*labeled_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // labeled_statement ::= ID COLON statement 
            {
              Absyn.LabeledStmt RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Statement e2 = (Absyn.Statement)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.LabeledStmt(e1left, e1, e2)
              CUP$Grm$result = new java_cup.runtime.Symbol(42/*labeled_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= jump_statement 
            {
              Absyn.Statement RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.StmtList e = (Absyn.StmtList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.Statement(eleft, e)
              CUP$Grm$result = new java_cup.runtime.Symbol(40/*statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= iteration_statement 
            {
              Absyn.Statement RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.IterStmt e = (Absyn.IterStmt)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.Statement(eleft, e)
              CUP$Grm$result = new java_cup.runtime.Symbol(40/*statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= selection_statement 
            {
              Absyn.Statement RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.SelectStmt e = (Absyn.SelectStmt)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.Statement(eleft, e)
              CUP$Grm$result = new java_cup.runtime.Symbol(40/*statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= expression_statement 
            {
              Absyn.Statement RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.ExpressionStmt e = (Absyn.ExpressionStmt)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.Statement(eleft, e)
              CUP$Grm$result = new java_cup.runtime.Symbol(40/*statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= compound_statement 
            {
              Absyn.Statement RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.CompoundStmt e = (Absyn.CompoundStmt)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.Statement(eleft, e)
              CUP$Grm$result = new java_cup.runtime.Symbol(40/*statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement ::= labeled_statement 
            {
              Absyn.Statement RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.LabeledStmt e = (Absyn.LabeledStmt)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.Statement(eleft, e)
              CUP$Grm$result = new java_cup.runtime.Symbol(40/*statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expression_part ::= expression SEMICOLON 
            {
              Absyn.ExpPart RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.ExpPart(e1left, e1); 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*expression_part*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression_list ::= expression_part 
            {
              Absyn.ExpList RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.ExpPart e1 = (Absyn.ExpPart)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ExpList(e1left, e1) ;
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*expression_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expression_list ::= expression_list expression_part 
            {
              Absyn.ExpList RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.ExpList e1 = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.ExpPart e2 = (Absyn.ExpPart)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ExpList(e1left, e1, e2) ;
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*expression_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Var ::= ID 
            {
              Absyn.Var RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.SimpleVar(nleft, sym(n)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*Var*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaration ::= ENUM ID LBRACE enumerator_list RBRACE 
            {
              Absyn.Dec RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.EnumeratorList e1 = (Absyn.EnumeratorList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.EnumDecl(e1left, e1); 
              CUP$Grm$result = new java_cup.runtime.Symbol(29/*declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaration ::= bitfield_list struct_or_union name struct_or_union_declarator 
            {
              Absyn.Dec RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.BitFieldList e1 = (Absyn.BitFieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.StructOrUnion e2 = (Absyn.StructOrUnion)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Name e3 = (Absyn.Name)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.StructOrUnionDeclarator e4 = (Absyn.StructOrUnionDeclarator)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.StructOrUnionDecl(e1left, e1, e2, e3, e4); 
              CUP$Grm$result = new java_cup.runtime.Symbol(29/*declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= TYPEDEF type name SEMICOLON 
            {
              Absyn.Dec RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Ty e1 = (Absyn.Ty)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Name e2 = (Absyn.Name)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.TypedefDecl(e1left, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(29/*declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= FUN bitfield_list type name type_parameters SEMICOLON 
            {
              Absyn.Dec RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Absyn.BitFieldList e1 = (Absyn.BitFieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.Ty e2 = (Absyn.Ty)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Name e3 = (Absyn.Name)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.ParamList e4 = (Absyn.ParamList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.FunDecl(e1left, e1, e2, e3, e4) ;
              CUP$Grm$result = new java_cup.runtime.Symbol(29/*declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= FUN bitfield_list type name type_parameters compound_statement 
            {
              Absyn.Dec RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Absyn.BitFieldList e1 = (Absyn.BitFieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.Ty e2 = (Absyn.Ty)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Name e3 = (Absyn.Name)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.ParamList e4 = (Absyn.ParamList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e5left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e5right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.CompoundStmt e5 = (Absyn.CompoundStmt)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FunDecl(e1left, e1, e2, e3, e4,e5); 
              CUP$Grm$result = new java_cup.runtime.Symbol(29/*declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= VAR bitfield_list type name initialization SEMICOLON 
            {
              Absyn.Dec RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Absyn.BitFieldList e1 = (Absyn.BitFieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.Ty e2 = (Absyn.Ty)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Name e3 = (Absyn.Name)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Initialization e4 = (Absyn.Initialization)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.FunDecl(e1left, e1, e2, e3, e4); 
              CUP$Grm$result = new java_cup.runtime.Symbol(29/*declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration ::= VAR bitfield_list type name initialization SEMICOLON 
            {
              Absyn.Dec RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Absyn.BitFieldList e1 = (Absyn.BitFieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.Ty e2 = (Absyn.Ty)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Name e3 = (Absyn.Name)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Initialization e4 = (Absyn.Initialization)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.VarDecl(e1left, e1, e2, e3, e4); 
              CUP$Grm$result = new java_cup.runtime.Symbol(29/*declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expression ::= expression COMMA assignment_expression 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(1/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expression ::= assignment_expression 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(1/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // expression ::= error 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.SeqExp(eleft, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= expression EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp start_val = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = start_val;
              CUP$Grm$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Grm$parser.done_parsing();
          return CUP$Grm$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

