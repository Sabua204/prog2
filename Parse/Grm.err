Opening files...
Parsing specification from standard input...
Checking specification...
Warning: Terminal "ELIPSIS" was declared but never used
Warning: Terminal "SIGNED" was declared but never used
Warning: Terminal "GOTO" was declared but never used
Warning: Terminal "RETURN" was declared but never used
Warning: Terminal "BREAK" was declared but never used
Warning: Terminal "DECIMAL_LITERAL" was declared but never used
Warning: Terminal "CONTINUE" was declared but never used
Warning: Terminal "UNSIGNED" was declared but never used
Warning: Terminal "CHAR_LITERAL" was declared but never used
Warning: Non terminal "Absyn" was declared but never used
Warning: Non terminal "TypeDec" was declared but never used
Warning: Non terminal "parameter_list" was declared but never used
Building parse tables...
  Computing non-terminal nullability...
  Computing first sets...
  Building state machine...
  Filling in tables...
*** Shift/Reduce conflict found in state #15
  between unary_expression ::= postfix_expression (*) 
  and     postfix_expression ::= postfix_expression (*) LPAREN argument_expression_list RPAREN 
  under symbol LPAREN
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #15
  between unary_expression ::= postfix_expression (*) 
  and     postfix_expression ::= postfix_expression (*) INCREMENT 
  under symbol INCREMENT
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #15
  between unary_expression ::= postfix_expression (*) 
  and     postfix_expression ::= postfix_expression (*) DECREMENT 
  under symbol DECREMENT
  Resolved in favor of shifting.

  Checking for non-reduced productions...
*** Production "typedef_name ::= identifier " never reduced
*** Production "identifier_list ::= identifier_list identifier " never reduced
*** Production "identifier_list ::= identifier " never reduced
*** Production "type_parameters ::= LBRACE initializer_list RBRACE " never reduced
*** Production "type_parameters ::= LPAREN RPAREN " never reduced
*** Production "type_parameters ::= LPAREN parameter_type_list RPAREN " never reduced
*** Production "struct_or_union ::= UNION " never reduced
*** Production "struct_or_union ::= STRUCT " never reduced
*** Production "struct_declaration_list ::= struct_declaration_list type name SEMICOLON " never reduced
*** Production "struct_declaration_list ::= type name SEMICOLON " never reduced
*** Production "enumerator ::= ID ASSIGN constant_expression " never reduced
*** Production "enumerator ::= ID " never reduced
*** Production "enumerator_list ::= enumerator_list COMMA enumerator " never reduced
*** Production "enumerator_list ::= enumerator " never reduced
*** Production "struct_or_union_declarator ::= LBRACE struct_declaration_list RBRACE " never reduced
*** Production "initialization ::= ASSIGN initializer " never reduced
*** Production "initialization ::= " never reduced
*** Production "pointer_list ::= pointer_list TIMES " never reduced
*** Production "pointer_list ::= TIMES " never reduced
*** Production "brackets_list ::= expression_array_type_list " never reduced
*** Production "brackets_list ::= empty_array_type_list " never reduced
*** Production "type_augments ::= pointer_list brackets_list " never reduced
*** Production "type_augments ::= brackets_list " never reduced
*** Production "type_augments ::= pointer_list " never reduced
*** Production "type_qualifier_list ::= type_qualifier_list type_qualifier " never reduced
*** Production "type_qualifier_list ::= type_qualifier " never reduced
*** Production "type ::= type_name " never reduced
*** Production "type ::= type_name type_augments " never reduced
*** Production "expression_array_type ::= LBRACK constant_expression RBRACK " never reduced
*** Production "expression_array_type_list ::= expression_array_type_list expression_array_type " never reduced
*** Production "expression_array_type_list ::= expression_array_type " never reduced
*** Production "empty_array_type ::= LBRACK RBRACK " never reduced
*** Production "empty_array_type_list ::= empty_array_type_list empty_array_type " never reduced
*** Production "empty_array_type_list ::= empty_array_type " never reduced
*** Production "bitfield_value ::= REGISTER " never reduced
*** Production "bitfield_value ::= AUTO " never reduced
*** Production "bitfield_value ::= STATIC " never reduced
*** Production "bitfield_value ::= EXTERN " never reduced
*** Production "bitfield_value ::= VOLATILE " never reduced
*** Production "bitfield_value ::= CONST " never reduced
*** Production "bitfield_list ::= bitfield_value bitfield_list " never reduced
*** Production "bitfield_list ::= " never reduced
*** Production "name ::= ID " never reduced
*** Production "iteration_statement ::= FOR LPAREN expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RPAREN statement " never reduced
*** Production "iteration_statement ::= DO statement WHILE LPAREN expression RPAREN SEMICOLON " never reduced
*** Production "iteration_statement ::= WHILE LPAREN expression RPAREN statement " never reduced
*** Production "selection_statement ::= SWITCH LPAREN expression RPAREN statement " never reduced
*** Production "selection_statement ::= IF LPAREN expression RPAREN statement ELSE statement " never reduced
*** Production "selection_statement ::= IF LPAREN expression RPAREN statement " never reduced
*** Production "expression_opt ::= expression " never reduced
*** Production "expression_opt ::= " never reduced
*** Production "expression_statement ::= expression_opt SEMICOLON " never reduced
*** Production "statement_list ::= statement_list statement " never reduced
*** Production "statement_list ::= statement " never reduced
*** Production "statement_list_opt ::= statement_list " never reduced
*** Production "statement_list_opt ::= " never reduced
*** Production "declaration_list ::= declaration_list declaration " never reduced
*** Production "declaration_list ::= declaration " never reduced
*** Production "declaration_list_opt ::= declaration_list " never reduced
*** Production "declaration_list_opt ::= " never reduced
*** Production "compound_statement ::= LBRACE declaration_list_opt statement_list_opt RBRACE " never reduced
*** Production "labeled_statement ::= DEFAULT COLON statement " never reduced
*** Production "labeled_statement ::= CASE constant_expression COLON statement " never reduced
*** Production "labeled_statement ::= ID COLON statement " never reduced
*** Production "statement ::= jump_statement " never reduced
*** Production "statement ::= iteration_statement " never reduced
*** Production "statement ::= selection_statement " never reduced
*** Production "statement ::= expression_statement " never reduced
*** Production "statement ::= compound_statement " never reduced
*** Production "statement ::= labeled_statement " never reduced
*** Production "expression_part ::= expression SEMICOLON " never reduced
*** Production "expression_list ::= expression_part " never reduced
*** Production "expression_list ::= expression_list expression_part " never reduced
*** Production "Var ::= ID " never reduced
*** Production "declaration ::= ENUM ID LBRACE enumerator_list RBRACE " never reduced
*** Production "declaration ::= bitfield_list struct_or_union name struct_or_union_declarator " never reduced
*** Production "declaration ::= TYPEDEF type name SEMICOLON " never reduced
*** Production "declaration ::= FUN bitfield_list type name type_parameters SEMICOLON " never reduced
*** Production "declaration ::= FUN bitfield_list type name type_parameters compound_statement " never reduced
*** Production "declaration ::= VAR bitfield_list type name initialization SEMICOLON " never reduced
*** Production "declaration ::= VAR bitfield_list type name initialization SEMICOLON " never reduced
Writing parser...
===== Terminals =====
ELIPSIS SHORT SIGNED TIMES GT 
ARROW DIVASSIGN CONST GE PERIOD 
REGISTER ENUM SIZEOF RBRACK COMMA 
RBRACE RPAREN LBRACK LT INCREMENT 
SUBASSIGN DOUBLE STRUCT LBRACE LPAREN 
MODASSIGN TILDE LE VAR FLOAT 
BITWISEAND GOTO EQ LSHIFTASSIGN MODULUS 
LONG PLUS DIVIDE WHILE UNION 
ASSIGN CHAR ADDASSIGN SWITCH DO 
FOR EXTERN VOID RETURN ELSE 
BREAK FUN AMPERSAND INT STRING_LITERAL 
EOF SEMICOLON DEFAULT MULASSIGN DECREMENT 
MINUS OR error DECIMAL_LITERAL CONTINUE 
IF UNSIGNED BWISEAND BWISEOR ID 
COLON BWISEXOR BWISEORASSIGN RSHIFTASSIGN VOLATILE 
CHAR_LITERAL CASE RSHIFT BWISEXORASSIGN NEQ 
AND STATIC LSHIFT TYPEDEF AUTO 


===== Non terminals =====
inclusive_OR_expression struct_declaration_list bitfield_list declaration_list pointer_list 
initializer additive_expression iteration_statement enumerator $START 
jump_statement Var compound_statement initializer_list constant_expression 
type_qualifier_list initialization struct_or_union primary_expression identifier 
name argument_expression_list equality_expression cast_expression assignment_operator 
expression_array_type_list bitfield_value enumerator_list parameter_type_list expression 
Absyn type_parameters statement unary_expression empty_array_type_list 
selection_statement brackets_list conditional_expression TypeDec type_name 
postfix_expression logical_AND_expression typedef_name logical_OR_expression exclusive_OR_expression 
shift_expression AND_expression declaration_list_opt expression_opt type_qualifier 
parameter_list empty_array_type expression_array_type assignment_expression type_augments 
statement_list_opt expression_part multiplicative_expression expression_statement identifier_list 
expression_list struct_or_union_declarator declaration relational_expression labeled_statement 
unary_operator statement_list type 

===== Productions =====
assignment_operator ::= BWISEORASSIGN 
assignment_operator ::= BWISEXORASSIGN 
assignment_operator ::= BWISEAND 
assignment_operator ::= RSHIFTASSIGN 
assignment_operator ::= LSHIFTASSIGN 
assignment_operator ::= SUBASSIGN 
assignment_operator ::= ADDASSIGN 
assignment_operator ::= MODASSIGN 
assignment_operator ::= DIVASSIGN 
assignment_operator ::= MULASSIGN 
assignment_operator ::= ASSIGN 
assignment_expression ::= unary_expression assignment_operator assignment_expression 
assignment_expression ::= conditional_expression 
conditional_expression ::= logical_OR_expression expression COLON conditional_expression 
conditional_expression ::= logical_OR_expression 
logical_OR_expression ::= logical_OR_expression OR logical_AND_expression 
logical_OR_expression ::= logical_AND_expression 
logical_AND_expression ::= logical_AND_expression AND inclusive_OR_expression 
logical_AND_expression ::= inclusive_OR_expression 
inclusive_OR_expression ::= inclusive_OR_expression BWISEOR exclusive_OR_expression 
inclusive_OR_expression ::= exclusive_OR_expression 
exclusive_OR_expression ::= exclusive_OR_expression BWISEXOR AND_expression 
exclusive_OR_expression ::= AND_expression 
AND_expression ::= AND_expression BITWISEAND equality_expression 
AND_expression ::= equality_expression 
equality_expression ::= equality_expression NEQ relational_expression 
equality_expression ::= equality_expression EQ relational_expression 
equality_expression ::= relational_expression 
relational_expression ::= relational_expression GE shift_expression 
relational_expression ::= relational_expression LE shift_expression 
relational_expression ::= relational_expression GT shift_expression 
relational_expression ::= relational_expression LT shift_expression 
relational_expression ::= shift_expression 
shift_expression ::= shift_expression RSHIFT additive_expression 
shift_expression ::= shift_expression LSHIFT additive_expression 
shift_expression ::= additive_expression 
additive_expression ::= additive_expression MINUS multiplicative_expression 
additive_expression ::= additive_expression PLUS multiplicative_expression 
additive_expression ::= multiplicative_expression 
multiplicative_expression ::= multiplicative_expression MODULUS cast_expression 
multiplicative_expression ::= multiplicative_expression DIVIDE cast_expression 
multiplicative_expression ::= multiplicative_expression TIMES cast_expression 
multiplicative_expression ::= cast_expression 
cast_expression ::= LPAREN type_name RPAREN cast_expression 
cast_expression ::= unary_expression 
unary_operator ::= TILDE 
unary_operator ::= MINUS 
unary_operator ::= PLUS 
unary_operator ::= TIMES 
unary_operator ::= BITWISEAND 
unary_operator ::= AMPERSAND 
unary_expression ::= SIZEOF LPAREN type_name RPAREN 
unary_expression ::= SIZEOF unary_expression 
unary_expression ::= unary_operator cast_expression 
unary_expression ::= DECREMENT unary_expression 
unary_expression ::= INCREMENT unary_expression 
unary_expression ::= postfix_expression 
argument_expression_list ::= argument_expression_list COMMA assignment_expression 
argument_expression_list ::= assignment_expression 
postfix_expression ::= postfix_expression DECREMENT 
postfix_expression ::= postfix_expression INCREMENT 
postfix_expression ::= postfix_expression ARROW ID 
postfix_expression ::= postfix_expression PERIOD ID 
postfix_expression ::= postfix_expression LPAREN argument_expression_list RPAREN 
postfix_expression ::= postfix_expression LBRACK expression RBRACK 
postfix_expression ::= primary_expression 
primary_expression ::= LPAREN expression RPAREN 
primary_expression ::= STRING_LITERAL 
primary_expression ::= CONST 
typedef_name ::= identifier 
identifier_list ::= identifier_list identifier 
identifier_list ::= identifier 
type_parameters ::= LBRACE initializer_list RBRACE 
type_parameters ::= LPAREN RPAREN 
type_parameters ::= LPAREN parameter_type_list RPAREN 
struct_or_union ::= UNION 
struct_or_union ::= STRUCT 
struct_declaration_list ::= struct_declaration_list type name SEMICOLON 
struct_declaration_list ::= type name SEMICOLON 
enumerator ::= ID ASSIGN constant_expression 
enumerator ::= ID 
enumerator_list ::= enumerator_list COMMA enumerator 
enumerator_list ::= enumerator 
struct_or_union_declarator ::= LBRACE struct_declaration_list RBRACE 
initialization ::= ASSIGN initializer 
initialization ::= 
type_name ::= ID 
type_name ::= ENUM ID 
type_name ::= DOUBLE 
type_name ::= FLOAT 
type_name ::= LONG 
type_name ::= INT 
type_name ::= SHORT 
type_name ::= CHAR 
type_name ::= VOID 
pointer_list ::= pointer_list TIMES 
pointer_list ::= TIMES 
brackets_list ::= expression_array_type_list 
brackets_list ::= empty_array_type_list 
type_augments ::= pointer_list brackets_list 
type_augments ::= brackets_list 
type_augments ::= pointer_list 
type_qualifier_list ::= type_qualifier_list type_qualifier 
type_qualifier_list ::= type_qualifier 
type ::= type_name 
type ::= type_name type_augments 
expression_array_type ::= LBRACK constant_expression RBRACK 
expression_array_type_list ::= expression_array_type_list expression_array_type 
expression_array_type_list ::= expression_array_type 
empty_array_type ::= LBRACK RBRACK 
empty_array_type_list ::= empty_array_type_list empty_array_type 
empty_array_type_list ::= empty_array_type 
bitfield_value ::= REGISTER 
bitfield_value ::= AUTO 
bitfield_value ::= STATIC 
bitfield_value ::= EXTERN 
bitfield_value ::= VOLATILE 
bitfield_value ::= CONST 
bitfield_list ::= bitfield_value bitfield_list 
bitfield_list ::= 
name ::= ID 
iteration_statement ::= FOR LPAREN expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RPAREN statement 
iteration_statement ::= DO statement WHILE LPAREN expression RPAREN SEMICOLON 
iteration_statement ::= WHILE LPAREN expression RPAREN statement 
selection_statement ::= SWITCH LPAREN expression RPAREN statement 
selection_statement ::= IF LPAREN expression RPAREN statement ELSE statement 
selection_statement ::= IF LPAREN expression RPAREN statement 
expression_opt ::= expression 
expression_opt ::= 
expression_statement ::= expression_opt SEMICOLON 
statement_list ::= statement_list statement 
statement_list ::= statement 
statement_list_opt ::= statement_list 
statement_list_opt ::= 
declaration_list ::= declaration_list declaration 
declaration_list ::= declaration 
declaration_list_opt ::= declaration_list 
declaration_list_opt ::= 
compound_statement ::= LBRACE declaration_list_opt statement_list_opt RBRACE 
labeled_statement ::= DEFAULT COLON statement 
labeled_statement ::= CASE constant_expression COLON statement 
labeled_statement ::= ID COLON statement 
statement ::= jump_statement 
statement ::= iteration_statement 
statement ::= selection_statement 
statement ::= expression_statement 
statement ::= compound_statement 
statement ::= labeled_statement 
expression_part ::= expression SEMICOLON 
expression_list ::= expression_part 
expression_list ::= expression_list expression_part 
Var ::= ID 
declaration ::= ENUM ID LBRACE enumerator_list RBRACE 
declaration ::= bitfield_list struct_or_union name struct_or_union_declarator 
declaration ::= TYPEDEF type name SEMICOLON 
declaration ::= FUN bitfield_list type name type_parameters SEMICOLON 
declaration ::= FUN bitfield_list type name type_parameters compound_statement 
declaration ::= VAR bitfield_list type name initialization SEMICOLON 
declaration ::= VAR bitfield_list type name initialization SEMICOLON 
expression ::= expression COMMA assignment_expression 
expression ::= assignment_expression 
expression ::= error 
$START ::= expression EOF 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {EOF error STRING_LITERAL BITWISEAND LPAREN TIMES PLUS COMMA MINUS TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [shift_expression ::= (*) additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [cast_expression ::= (*) unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) unary_operator cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [assignment_expression ::= (*) conditional_expression , {EOF COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TIMES , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [expression ::= (*) error , {EOF COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {EOF error STRING_LITERAL BITWISEAND LPAREN TIMES PLUS COMMA MINUS TILDE AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [assignment_expression ::= (*) unary_expression assignment_operator assignment_expression , {EOF COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [additive_expression ::= (*) multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) PLUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) postfix_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [expression ::= (*) assignment_expression , {EOF COMMA }]
  [postfix_expression ::= (*) primary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {EOF error STRING_LITERAL BITWISEAND LPAREN TIMES PLUS COMMA MINUS TILDE AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [AND_expression ::= (*) equality_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) MINUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [expression ::= (*) expression COMMA assignment_expression , {EOF COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {EOF COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) AMPERSAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [primary_expression ::= (*) CONST , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {EOF error STRING_LITERAL BITWISEAND LPAREN TIMES PLUS COMMA MINUS TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [equality_expression ::= (*) relational_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TILDE , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [conditional_expression ::= (*) logical_OR_expression expression COLON conditional_expression , {EOF COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) BITWISEAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [$START ::= (*) expression EOF , {EOF }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}
transition on AMPERSAND to state [31]
transition on unary_operator to state [30]
transition on multiplicative_expression to state [29]
transition on logical_OR_expression to state [28]
transition on error to state [27]
transition on CONST to state [26]
transition on MINUS to state [25]
transition on INCREMENT to state [24]
transition on equality_expression to state [23]
transition on relational_expression to state [22]
transition on additive_expression to state [21]
transition on inclusive_OR_expression to state [20]
transition on expression to state [19]
transition on logical_AND_expression to state [18]
transition on exclusive_OR_expression to state [17]
transition on STRING_LITERAL to state [16]
transition on postfix_expression to state [15]
transition on TILDE to state [14]
transition on shift_expression to state [13]
transition on conditional_expression to state [12]
transition on LPAREN to state [11]
transition on unary_expression to state [10]
transition on BITWISEAND to state [9]
transition on AND_expression to state [8]
transition on DECREMENT to state [7]
transition on cast_expression to state [6]
transition on assignment_expression to state [5]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [1]: {
  [unary_operator ::= TIMES (*) , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
}

-------------------
lalr_state [2]: {
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_expression ::= (*) unary_operator cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_operator ::= (*) TIMES , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [postfix_expression ::= (*) primary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_operator ::= (*) AMPERSAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_operator ::= (*) TILDE , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_expression ::= SIZEOF (*) unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_operator ::= (*) PLUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_operator ::= (*) BITWISEAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_expression ::= SIZEOF (*) LPAREN type_name RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_expression ::= (*) postfix_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_operator ::= (*) MINUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) CONST , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}
transition on AMPERSAND to state [31]
transition on CONST to state [26]
transition on BITWISEAND to state [9]
transition on LPAREN to state [123]
transition on primary_expression to state [3]
transition on TIMES to state [1]
transition on DECREMENT to state [7]
transition on TILDE to state [14]
transition on postfix_expression to state [15]
transition on PLUS to state [4]
transition on STRING_LITERAL to state [16]
transition on unary_expression to state [122]
transition on SIZEOF to state [2]
transition on unary_operator to state [30]
transition on INCREMENT to state [24]
transition on MINUS to state [25]

-------------------
lalr_state [3]: {
  [postfix_expression ::= primary_expression (*) , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}

-------------------
lalr_state [4]: {
  [unary_operator ::= PLUS (*) , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
}

-------------------
lalr_state [5]: {
  [expression ::= assignment_expression (*) , {EOF RPAREN COMMA COLON RBRACK }]
}

-------------------
lalr_state [6]: {
  [multiplicative_expression ::= cast_expression (*) , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
}

-------------------
lalr_state [7]: {
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_expression ::= (*) unary_operator cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_operator ::= (*) TIMES , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [postfix_expression ::= (*) primary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_operator ::= (*) AMPERSAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_operator ::= (*) TILDE , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_operator ::= (*) PLUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_expression ::= DECREMENT (*) unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_operator ::= (*) BITWISEAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_expression ::= (*) postfix_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_operator ::= (*) MINUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) CONST , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}
transition on AMPERSAND to state [31]
transition on CONST to state [26]
transition on BITWISEAND to state [9]
transition on LPAREN to state [76]
transition on primary_expression to state [3]
transition on TIMES to state [1]
transition on DECREMENT to state [7]
transition on TILDE to state [14]
transition on postfix_expression to state [15]
transition on PLUS to state [4]
transition on STRING_LITERAL to state [16]
transition on unary_expression to state [121]
transition on SIZEOF to state [2]
transition on unary_operator to state [30]
transition on INCREMENT to state [24]
transition on MINUS to state [25]

-------------------
lalr_state [8]: {
  [AND_expression ::= AND_expression (*) BITWISEAND equality_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [exclusive_OR_expression ::= AND_expression (*) , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
}
transition on BITWISEAND to state [53]

-------------------
lalr_state [9]: {
  [unary_operator ::= BITWISEAND (*) , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
}

-------------------
lalr_state [10]: {
  [assignment_operator ::= (*) LSHIFTASSIGN , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [assignment_operator ::= (*) MODASSIGN , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [assignment_operator ::= (*) ASSIGN , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [assignment_operator ::= (*) BWISEAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [assignment_operator ::= (*) SUBASSIGN , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [assignment_operator ::= (*) DIVASSIGN , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [assignment_expression ::= unary_expression (*) assignment_operator assignment_expression , {EOF RPAREN COMMA COLON RBRACK }]
  [assignment_operator ::= (*) BWISEORASSIGN , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [assignment_operator ::= (*) RSHIFTASSIGN , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [assignment_operator ::= (*) ADDASSIGN , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [assignment_operator ::= (*) MULASSIGN , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [cast_expression ::= unary_expression (*) , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [assignment_operator ::= (*) BWISEXORASSIGN , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
}
transition on MODASSIGN to state [119]
transition on DIVASSIGN to state [118]
transition on RSHIFTASSIGN to state [117]
transition on ASSIGN to state [116]
transition on assignment_operator to state [115]
transition on BWISEXORASSIGN to state [114]
transition on ADDASSIGN to state [113]
transition on BWISEAND to state [112]
transition on LSHIFTASSIGN to state [111]
transition on SUBASSIGN to state [110]
transition on BWISEORASSIGN to state [109]
transition on MULASSIGN to state [108]

-------------------
lalr_state [11]: {
  [type_name ::= (*) VOID , {RPAREN }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {error STRING_LITERAL BITWISEAND LPAREN RPAREN TIMES PLUS MINUS TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [shift_expression ::= (*) additive_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [cast_expression ::= (*) unary_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) unary_operator cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [type_name ::= (*) FLOAT , {RPAREN }]
  [assignment_expression ::= (*) conditional_expression , {RPAREN COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TIMES , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= LPAREN (*) expression RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [expression ::= (*) error , {RPAREN COMMA }]
  [type_name ::= (*) CHAR , {RPAREN }]
  [logical_OR_expression ::= (*) logical_AND_expression , {error STRING_LITERAL BITWISEAND LPAREN RPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [cast_expression ::= LPAREN (*) type_name RPAREN cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF unary_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [type_name ::= (*) DOUBLE , {RPAREN }]
  [assignment_expression ::= (*) unary_expression assignment_operator assignment_expression , {RPAREN COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [additive_expression ::= (*) multiplicative_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) PLUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) postfix_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) primary_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [expression ::= (*) assignment_expression , {RPAREN COMMA }]
  [type_name ::= (*) SHORT , {RPAREN }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {error STRING_LITERAL BITWISEAND LPAREN RPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [AND_expression ::= (*) equality_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [type_name ::= (*) ENUM ID , {RPAREN }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) MINUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) INCREMENT unary_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [expression ::= (*) expression COMMA assignment_expression , {RPAREN COMMA }]
  [type_name ::= (*) INT , {RPAREN }]
  [conditional_expression ::= (*) logical_OR_expression , {RPAREN COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) shift_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) AMPERSAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [primary_expression ::= (*) CONST , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [type_name ::= (*) ID , {RPAREN }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {error STRING_LITERAL BITWISEAND LPAREN RPAREN TIMES PLUS MINUS TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [equality_expression ::= (*) relational_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TILDE , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) DECREMENT unary_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [type_name ::= (*) LONG , {RPAREN }]
  [conditional_expression ::= (*) logical_OR_expression expression COLON conditional_expression , {RPAREN COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) BITWISEAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) STRING_LITERAL , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}
transition on unary_operator to state [30]
transition on relational_expression to state [22]
transition on LONG to state [104]
transition on multiplicative_expression to state [29]
transition on FLOAT to state [103]
transition on ENUM to state [102]
transition on assignment_expression to state [5]
transition on TIMES to state [1]
transition on AND_expression to state [8]
transition on shift_expression to state [13]
transition on exclusive_OR_expression to state [17]
transition on logical_OR_expression to state [28]
transition on postfix_expression to state [15]
transition on logical_AND_expression to state [18]
transition on VOID to state [101]
transition on type_name to state [100]
transition on conditional_expression to state [12]
transition on error to state [27]
transition on unary_expression to state [10]
transition on expression to state [77]
transition on ID to state [99]
transition on AMPERSAND to state [31]
transition on PLUS to state [4]
transition on cast_expression to state [6]
transition on equality_expression to state [23]
transition on SIZEOF to state [2]
transition on primary_expression to state [3]
transition on TILDE to state [14]
transition on MINUS to state [25]
transition on DECREMENT to state [7]
transition on INT to state [98]
transition on LPAREN to state [11]
transition on DOUBLE to state [97]
transition on BITWISEAND to state [9]
transition on additive_expression to state [21]
transition on CHAR to state [96]
transition on CONST to state [26]
transition on INCREMENT to state [24]
transition on SHORT to state [95]
transition on STRING_LITERAL to state [16]
transition on inclusive_OR_expression to state [20]

-------------------
lalr_state [12]: {
  [assignment_expression ::= conditional_expression (*) , {EOF RPAREN COMMA COLON RBRACK }]
}

-------------------
lalr_state [13]: {
  [shift_expression ::= shift_expression (*) LSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [relational_expression ::= shift_expression (*) , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [shift_expression ::= shift_expression (*) RSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
}
transition on RSHIFT to state [64]
transition on LSHIFT to state [63]

-------------------
lalr_state [14]: {
  [unary_operator ::= TILDE (*) , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
}

-------------------
lalr_state [15]: {
  [postfix_expression ::= postfix_expression (*) ARROW ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= postfix_expression (*) LBRACK expression RBRACK , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_expression ::= postfix_expression (*) , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= postfix_expression (*) DECREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= postfix_expression (*) PERIOD ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= postfix_expression (*) INCREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= postfix_expression (*) LPAREN argument_expression_list RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}
transition on PERIOD to state [85]
transition on LPAREN to state [84]
transition on ARROW to state [83]
transition on INCREMENT to state [82]
transition on LBRACK to state [81]
transition on DECREMENT to state [80]

-------------------
lalr_state [16]: {
  [primary_expression ::= STRING_LITERAL (*) , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}

-------------------
lalr_state [17]: {
  [inclusive_OR_expression ::= exclusive_OR_expression (*) , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [exclusive_OR_expression ::= exclusive_OR_expression (*) BWISEXOR AND_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
}
transition on BWISEXOR to state [51]

-------------------
lalr_state [18]: {
  [logical_AND_expression ::= logical_AND_expression (*) AND inclusive_OR_expression , {EOF error STRING_LITERAL BITWISEAND LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [logical_OR_expression ::= logical_AND_expression (*) , {EOF error STRING_LITERAL BITWISEAND LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK TILDE AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
}
transition on AND to state [47]

-------------------
lalr_state [19]: {
  [expression ::= expression (*) COMMA assignment_expression , {EOF COMMA }]
  [$START ::= expression (*) EOF , {EOF }]
}
transition on EOF to state [79]
transition on COMMA to state [42]

-------------------
lalr_state [20]: {
  [logical_AND_expression ::= inclusive_OR_expression (*) , {EOF error STRING_LITERAL BITWISEAND LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [inclusive_OR_expression ::= inclusive_OR_expression (*) BWISEOR exclusive_OR_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
}
transition on BWISEOR to state [49]

-------------------
lalr_state [21]: {
  [additive_expression ::= additive_expression (*) MINUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [additive_expression ::= additive_expression (*) PLUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [shift_expression ::= additive_expression (*) , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
}
transition on MINUS to state [67]
transition on PLUS to state [66]

-------------------
lalr_state [22]: {
  [relational_expression ::= relational_expression (*) GE shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [relational_expression ::= relational_expression (*) LT shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [relational_expression ::= relational_expression (*) LE shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [equality_expression ::= relational_expression (*) , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [relational_expression ::= relational_expression (*) GT shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
}
transition on GE to state [61]
transition on LE to state [60]
transition on GT to state [59]
transition on LT to state [58]

-------------------
lalr_state [23]: {
  [equality_expression ::= equality_expression (*) NEQ relational_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [equality_expression ::= equality_expression (*) EQ relational_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [AND_expression ::= equality_expression (*) , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
}
transition on NEQ to state [56]
transition on EQ to state [55]

-------------------
lalr_state [24]: {
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_expression ::= (*) unary_operator cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_operator ::= (*) TIMES , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [postfix_expression ::= (*) primary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_expression ::= INCREMENT (*) unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_operator ::= (*) AMPERSAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_operator ::= (*) TILDE , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_operator ::= (*) PLUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_operator ::= (*) BITWISEAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_expression ::= (*) postfix_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_operator ::= (*) MINUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) CONST , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}
transition on AMPERSAND to state [31]
transition on CONST to state [26]
transition on BITWISEAND to state [9]
transition on LPAREN to state [76]
transition on primary_expression to state [3]
transition on TIMES to state [1]
transition on DECREMENT to state [7]
transition on TILDE to state [14]
transition on postfix_expression to state [15]
transition on PLUS to state [4]
transition on STRING_LITERAL to state [16]
transition on unary_expression to state [75]
transition on SIZEOF to state [2]
transition on unary_operator to state [30]
transition on INCREMENT to state [24]
transition on MINUS to state [25]

-------------------
lalr_state [25]: {
  [unary_operator ::= MINUS (*) , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
}

-------------------
lalr_state [26]: {
  [primary_expression ::= CONST (*) , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}

-------------------
lalr_state [27]: {
  [expression ::= error (*) , {EOF RPAREN COMMA COLON RBRACK }]
}

-------------------
lalr_state [28]: {
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {EOF error STRING_LITERAL BITWISEAND LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [shift_expression ::= (*) additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [cast_expression ::= (*) unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) unary_operator cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [assignment_expression ::= (*) conditional_expression , {COMMA COLON }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TIMES , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [expression ::= (*) error , {COMMA COLON }]
  [logical_OR_expression ::= (*) logical_AND_expression , {EOF error STRING_LITERAL BITWISEAND LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK TILDE AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [assignment_expression ::= (*) unary_expression assignment_operator assignment_expression , {COMMA COLON }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [additive_expression ::= (*) multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) PLUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) postfix_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [expression ::= (*) assignment_expression , {COMMA COLON }]
  [postfix_expression ::= (*) primary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [logical_OR_expression ::= logical_OR_expression (*) OR logical_AND_expression , {EOF error STRING_LITERAL BITWISEAND LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK TILDE AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {EOF error STRING_LITERAL BITWISEAND LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK TILDE AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [AND_expression ::= (*) equality_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) MINUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [expression ::= (*) expression COMMA assignment_expression , {COMMA COLON }]
  [conditional_expression ::= logical_OR_expression (*) , {EOF RPAREN COMMA COLON RBRACK }]
  [conditional_expression ::= (*) logical_OR_expression , {COMMA COLON }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) AMPERSAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [primary_expression ::= (*) CONST , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {EOF error STRING_LITERAL BITWISEAND LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [equality_expression ::= (*) relational_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TILDE , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [conditional_expression ::= logical_OR_expression (*) expression COLON conditional_expression , {EOF RPAREN COMMA COLON RBRACK }]
  [conditional_expression ::= (*) logical_OR_expression expression COLON conditional_expression , {COMMA COLON }]
  [exclusive_OR_expression ::= (*) AND_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) BITWISEAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}
transition on AMPERSAND to state [31]
transition on unary_operator to state [30]
transition on multiplicative_expression to state [29]
transition on logical_OR_expression to state [28]
transition on error to state [27]
transition on CONST to state [26]
transition on MINUS to state [25]
transition on INCREMENT to state [24]
transition on equality_expression to state [23]
transition on relational_expression to state [22]
transition on additive_expression to state [21]
transition on inclusive_OR_expression to state [20]
transition on expression to state [41]
transition on logical_AND_expression to state [18]
transition on exclusive_OR_expression to state [17]
transition on STRING_LITERAL to state [16]
transition on postfix_expression to state [15]
transition on TILDE to state [14]
transition on shift_expression to state [13]
transition on conditional_expression to state [12]
transition on LPAREN to state [11]
transition on unary_expression to state [10]
transition on BITWISEAND to state [9]
transition on AND_expression to state [8]
transition on DECREMENT to state [7]
transition on cast_expression to state [6]
transition on assignment_expression to state [5]
transition on OR to state [40]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [29]: {
  [multiplicative_expression ::= multiplicative_expression (*) MODULUS cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [multiplicative_expression ::= multiplicative_expression (*) DIVIDE cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [additive_expression ::= multiplicative_expression (*) , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [multiplicative_expression ::= multiplicative_expression (*) TIMES cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
}
transition on TIMES to state [36]
transition on MODULUS to state [35]
transition on DIVIDE to state [34]

-------------------
lalr_state [30]: {
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_expression ::= unary_operator (*) cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_expression ::= (*) unary_operator cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_operator ::= (*) TIMES , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) primary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_operator ::= (*) AMPERSAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_operator ::= (*) TILDE , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_operator ::= (*) PLUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_operator ::= (*) BITWISEAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [cast_expression ::= (*) unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_expression ::= (*) postfix_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_operator ::= (*) MINUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) CONST , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}
transition on AMPERSAND to state [31]
transition on CONST to state [26]
transition on BITWISEAND to state [9]
transition on LPAREN to state [11]
transition on primary_expression to state [3]
transition on TIMES to state [1]
transition on DECREMENT to state [7]
transition on cast_expression to state [33]
transition on TILDE to state [14]
transition on postfix_expression to state [15]
transition on PLUS to state [4]
transition on STRING_LITERAL to state [16]
transition on unary_expression to state [32]
transition on SIZEOF to state [2]
transition on unary_operator to state [30]
transition on INCREMENT to state [24]
transition on MINUS to state [25]

-------------------
lalr_state [31]: {
  [unary_operator ::= AMPERSAND (*) , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
}

-------------------
lalr_state [32]: {
  [cast_expression ::= unary_expression (*) , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}

-------------------
lalr_state [33]: {
  [unary_expression ::= unary_operator cast_expression (*) , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}

-------------------
lalr_state [34]: {
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) unary_operator cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TIMES , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) primary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [multiplicative_expression ::= multiplicative_expression DIVIDE (*) cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) AMPERSAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_operator ::= (*) TILDE , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) PLUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) BITWISEAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [cast_expression ::= (*) unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) postfix_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) MINUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) CONST , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
}
transition on AMPERSAND to state [31]
transition on CONST to state [26]
transition on BITWISEAND to state [9]
transition on LPAREN to state [11]
transition on primary_expression to state [3]
transition on TIMES to state [1]
transition on DECREMENT to state [7]
transition on cast_expression to state [39]
transition on TILDE to state [14]
transition on postfix_expression to state [15]
transition on PLUS to state [4]
transition on STRING_LITERAL to state [16]
transition on unary_expression to state [32]
transition on SIZEOF to state [2]
transition on unary_operator to state [30]
transition on INCREMENT to state [24]
transition on MINUS to state [25]

-------------------
lalr_state [35]: {
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) unary_operator cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TIMES , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) primary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) AMPERSAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_operator ::= (*) TILDE , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) PLUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) BITWISEAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [multiplicative_expression ::= multiplicative_expression MODULUS (*) cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [cast_expression ::= (*) unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) postfix_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) MINUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) CONST , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
}
transition on AMPERSAND to state [31]
transition on CONST to state [26]
transition on BITWISEAND to state [9]
transition on LPAREN to state [11]
transition on primary_expression to state [3]
transition on TIMES to state [1]
transition on DECREMENT to state [7]
transition on cast_expression to state [38]
transition on TILDE to state [14]
transition on postfix_expression to state [15]
transition on PLUS to state [4]
transition on STRING_LITERAL to state [16]
transition on unary_expression to state [32]
transition on SIZEOF to state [2]
transition on unary_operator to state [30]
transition on INCREMENT to state [24]
transition on MINUS to state [25]

-------------------
lalr_state [36]: {
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) unary_operator cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TIMES , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) primary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) AMPERSAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_operator ::= (*) TILDE , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) PLUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) BITWISEAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [cast_expression ::= (*) unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) postfix_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [multiplicative_expression ::= multiplicative_expression TIMES (*) cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) MINUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) CONST , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
}
transition on AMPERSAND to state [31]
transition on CONST to state [26]
transition on BITWISEAND to state [9]
transition on LPAREN to state [11]
transition on primary_expression to state [3]
transition on TIMES to state [1]
transition on DECREMENT to state [7]
transition on cast_expression to state [37]
transition on TILDE to state [14]
transition on postfix_expression to state [15]
transition on PLUS to state [4]
transition on STRING_LITERAL to state [16]
transition on unary_expression to state [32]
transition on SIZEOF to state [2]
transition on unary_operator to state [30]
transition on INCREMENT to state [24]
transition on MINUS to state [25]

-------------------
lalr_state [37]: {
  [multiplicative_expression ::= multiplicative_expression TIMES cast_expression (*) , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
}

-------------------
lalr_state [38]: {
  [multiplicative_expression ::= multiplicative_expression MODULUS cast_expression (*) , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
}

-------------------
lalr_state [39]: {
  [multiplicative_expression ::= multiplicative_expression DIVIDE cast_expression (*) , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
}

-------------------
lalr_state [40]: {
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {EOF error STRING_LITERAL BITWISEAND LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [shift_expression ::= (*) additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [cast_expression ::= (*) unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) unary_operator cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TIMES , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [additive_expression ::= (*) multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) PLUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) postfix_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) primary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [logical_OR_expression ::= logical_OR_expression OR (*) logical_AND_expression , {EOF error STRING_LITERAL BITWISEAND LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK TILDE AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [AND_expression ::= (*) equality_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) MINUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) AMPERSAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [primary_expression ::= (*) CONST , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {EOF error STRING_LITERAL BITWISEAND LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [equality_expression ::= (*) relational_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TILDE , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [exclusive_OR_expression ::= (*) AND_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) BITWISEAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
}
transition on AMPERSAND to state [31]
transition on unary_operator to state [30]
transition on multiplicative_expression to state [29]
transition on CONST to state [26]
transition on MINUS to state [25]
transition on INCREMENT to state [24]
transition on equality_expression to state [23]
transition on relational_expression to state [22]
transition on additive_expression to state [21]
transition on inclusive_OR_expression to state [20]
transition on logical_AND_expression to state [46]
transition on exclusive_OR_expression to state [17]
transition on STRING_LITERAL to state [16]
transition on postfix_expression to state [15]
transition on TILDE to state [14]
transition on shift_expression to state [13]
transition on LPAREN to state [11]
transition on unary_expression to state [32]
transition on BITWISEAND to state [9]
transition on AND_expression to state [8]
transition on DECREMENT to state [7]
transition on cast_expression to state [6]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [41]: {
  [conditional_expression ::= logical_OR_expression expression (*) COLON conditional_expression , {EOF RPAREN COMMA COLON RBRACK }]
  [expression ::= expression (*) COMMA assignment_expression , {COMMA COLON }]
}
transition on COLON to state [43]
transition on COMMA to state [42]

-------------------
lalr_state [42]: {
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {error STRING_LITERAL BITWISEAND LPAREN TIMES PLUS COMMA MINUS COLON TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS COLON BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [shift_expression ::= (*) additive_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS COLON LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [cast_expression ::= (*) unary_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) unary_operator cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [assignment_expression ::= (*) conditional_expression , {EOF RPAREN COMMA COLON RBRACK }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS COLON BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS COLON LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TIMES , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [logical_OR_expression ::= (*) logical_AND_expression , {error STRING_LITERAL BITWISEAND LPAREN TIMES PLUS COMMA MINUS COLON TILDE AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS COLON BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS COLON LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF unary_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [assignment_expression ::= (*) unary_expression assignment_operator assignment_expression , {EOF RPAREN COMMA COLON RBRACK }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS COLON TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS COLON LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [additive_expression ::= (*) multiplicative_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS COLON LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) PLUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) postfix_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) primary_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {error STRING_LITERAL BITWISEAND LPAREN TIMES PLUS COMMA MINUS COLON TILDE AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [AND_expression ::= (*) equality_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS COLON BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS COLON LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS COLON TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS COLON LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS COLON LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) MINUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [expression ::= expression COMMA (*) assignment_expression , {EOF RPAREN COMMA COLON RBRACK }]
  [unary_expression ::= (*) INCREMENT unary_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [conditional_expression ::= (*) logical_OR_expression , {EOF RPAREN COMMA COLON RBRACK }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS COLON BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) shift_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS COLON LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) AMPERSAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [primary_expression ::= (*) CONST , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {error STRING_LITERAL BITWISEAND LPAREN TIMES PLUS COMMA MINUS COLON TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [equality_expression ::= (*) relational_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS COLON BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS COLON LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TILDE , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) DECREMENT unary_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [conditional_expression ::= (*) logical_OR_expression expression COLON conditional_expression , {EOF RPAREN COMMA COLON RBRACK }]
  [exclusive_OR_expression ::= (*) AND_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS COLON BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS COLON LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) BITWISEAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) STRING_LITERAL , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}
transition on AMPERSAND to state [31]
transition on unary_operator to state [30]
transition on multiplicative_expression to state [29]
transition on logical_OR_expression to state [28]
transition on CONST to state [26]
transition on MINUS to state [25]
transition on INCREMENT to state [24]
transition on equality_expression to state [23]
transition on relational_expression to state [22]
transition on additive_expression to state [21]
transition on inclusive_OR_expression to state [20]
transition on logical_AND_expression to state [18]
transition on exclusive_OR_expression to state [17]
transition on STRING_LITERAL to state [16]
transition on postfix_expression to state [15]
transition on TILDE to state [14]
transition on shift_expression to state [13]
transition on conditional_expression to state [12]
transition on LPAREN to state [11]
transition on unary_expression to state [10]
transition on BITWISEAND to state [9]
transition on AND_expression to state [8]
transition on DECREMENT to state [7]
transition on cast_expression to state [6]
transition on assignment_expression to state [45]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [43]: {
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {EOF error STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [shift_expression ::= (*) additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [cast_expression ::= (*) unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) unary_operator cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS PERIOD DIVIDE LT GT LBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TIMES , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS PERIOD DIVIDE LT GT LBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [logical_OR_expression ::= (*) logical_AND_expression , {EOF error STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS PERIOD DIVIDE LT GT LBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [additive_expression ::= (*) multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) PLUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) postfix_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) primary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS PERIOD DIVIDE LT GT LBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {EOF error STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [AND_expression ::= (*) equality_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS PERIOD DIVIDE LT GT LBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) MINUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS PERIOD DIVIDE LT GT LBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [conditional_expression ::= (*) logical_OR_expression , {EOF RPAREN COMMA COLON RBRACK }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) AMPERSAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS PERIOD DIVIDE LT GT LBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [primary_expression ::= (*) CONST , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS PERIOD DIVIDE LT GT LBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {EOF error STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [equality_expression ::= (*) relational_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TILDE , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS PERIOD DIVIDE LT GT LBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [conditional_expression ::= logical_OR_expression expression COLON (*) conditional_expression , {EOF RPAREN COMMA COLON RBRACK }]
  [conditional_expression ::= (*) logical_OR_expression expression COLON conditional_expression , {EOF RPAREN COMMA COLON RBRACK }]
  [exclusive_OR_expression ::= (*) AND_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) BITWISEAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS PERIOD DIVIDE LT GT LBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
}
transition on AMPERSAND to state [31]
transition on unary_operator to state [30]
transition on multiplicative_expression to state [29]
transition on logical_OR_expression to state [28]
transition on CONST to state [26]
transition on MINUS to state [25]
transition on INCREMENT to state [24]
transition on equality_expression to state [23]
transition on relational_expression to state [22]
transition on additive_expression to state [21]
transition on inclusive_OR_expression to state [20]
transition on logical_AND_expression to state [18]
transition on exclusive_OR_expression to state [17]
transition on STRING_LITERAL to state [16]
transition on postfix_expression to state [15]
transition on TILDE to state [14]
transition on shift_expression to state [13]
transition on LPAREN to state [11]
transition on conditional_expression to state [44]
transition on unary_expression to state [32]
transition on BITWISEAND to state [9]
transition on AND_expression to state [8]
transition on DECREMENT to state [7]
transition on cast_expression to state [6]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [44]: {
  [conditional_expression ::= logical_OR_expression expression COLON conditional_expression (*) , {EOF RPAREN COMMA COLON RBRACK }]
}

-------------------
lalr_state [45]: {
  [expression ::= expression COMMA assignment_expression (*) , {EOF RPAREN COMMA COLON RBRACK }]
}

-------------------
lalr_state [46]: {
  [logical_AND_expression ::= logical_AND_expression (*) AND inclusive_OR_expression , {EOF error STRING_LITERAL BITWISEAND LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [logical_OR_expression ::= logical_OR_expression OR logical_AND_expression (*) , {EOF error STRING_LITERAL BITWISEAND LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK TILDE AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
}
transition on AND to state [47]

-------------------
lalr_state [47]: {
  [logical_AND_expression ::= logical_AND_expression AND (*) inclusive_OR_expression , {EOF error STRING_LITERAL BITWISEAND LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [shift_expression ::= (*) additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [cast_expression ::= (*) unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) unary_operator cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TIMES , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [additive_expression ::= (*) multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) PLUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) postfix_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) primary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [AND_expression ::= (*) equality_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) MINUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) AMPERSAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [primary_expression ::= (*) CONST , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [equality_expression ::= (*) relational_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TILDE , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [exclusive_OR_expression ::= (*) AND_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) BITWISEAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
}
transition on AMPERSAND to state [31]
transition on unary_operator to state [30]
transition on multiplicative_expression to state [29]
transition on CONST to state [26]
transition on MINUS to state [25]
transition on INCREMENT to state [24]
transition on equality_expression to state [23]
transition on relational_expression to state [22]
transition on additive_expression to state [21]
transition on inclusive_OR_expression to state [48]
transition on exclusive_OR_expression to state [17]
transition on STRING_LITERAL to state [16]
transition on postfix_expression to state [15]
transition on TILDE to state [14]
transition on shift_expression to state [13]
transition on LPAREN to state [11]
transition on unary_expression to state [32]
transition on BITWISEAND to state [9]
transition on AND_expression to state [8]
transition on DECREMENT to state [7]
transition on cast_expression to state [6]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [48]: {
  [inclusive_OR_expression ::= inclusive_OR_expression (*) BWISEOR exclusive_OR_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [logical_AND_expression ::= logical_AND_expression AND inclusive_OR_expression (*) , {EOF error STRING_LITERAL BITWISEAND LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
}
transition on BWISEOR to state [49]

-------------------
lalr_state [49]: {
  [equality_expression ::= (*) equality_expression EQ relational_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [shift_expression ::= (*) additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [cast_expression ::= (*) unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) unary_operator cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TIMES , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [additive_expression ::= (*) multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) PLUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) postfix_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) primary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [AND_expression ::= (*) equality_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [inclusive_OR_expression ::= inclusive_OR_expression BWISEOR (*) exclusive_OR_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) MINUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) AMPERSAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [primary_expression ::= (*) CONST , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [equality_expression ::= (*) relational_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TILDE , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [exclusive_OR_expression ::= (*) AND_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) BITWISEAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
}
transition on AMPERSAND to state [31]
transition on unary_operator to state [30]
transition on multiplicative_expression to state [29]
transition on CONST to state [26]
transition on MINUS to state [25]
transition on INCREMENT to state [24]
transition on equality_expression to state [23]
transition on relational_expression to state [22]
transition on additive_expression to state [21]
transition on exclusive_OR_expression to state [50]
transition on STRING_LITERAL to state [16]
transition on postfix_expression to state [15]
transition on TILDE to state [14]
transition on shift_expression to state [13]
transition on LPAREN to state [11]
transition on unary_expression to state [32]
transition on BITWISEAND to state [9]
transition on AND_expression to state [8]
transition on DECREMENT to state [7]
transition on cast_expression to state [6]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [50]: {
  [exclusive_OR_expression ::= exclusive_OR_expression (*) BWISEXOR AND_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [inclusive_OR_expression ::= inclusive_OR_expression BWISEOR exclusive_OR_expression (*) , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
}
transition on BWISEXOR to state [51]

-------------------
lalr_state [51]: {
  [equality_expression ::= (*) equality_expression EQ relational_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [shift_expression ::= (*) additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [cast_expression ::= (*) unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) unary_operator cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [exclusive_OR_expression ::= exclusive_OR_expression BWISEXOR (*) AND_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TIMES , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [additive_expression ::= (*) multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) PLUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) postfix_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) primary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [AND_expression ::= (*) equality_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) MINUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) AMPERSAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [primary_expression ::= (*) CONST , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [equality_expression ::= (*) relational_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TILDE , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) BITWISEAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
}
transition on AMPERSAND to state [31]
transition on unary_operator to state [30]
transition on multiplicative_expression to state [29]
transition on CONST to state [26]
transition on MINUS to state [25]
transition on INCREMENT to state [24]
transition on equality_expression to state [23]
transition on relational_expression to state [22]
transition on additive_expression to state [21]
transition on STRING_LITERAL to state [16]
transition on postfix_expression to state [15]
transition on TILDE to state [14]
transition on shift_expression to state [13]
transition on LPAREN to state [11]
transition on unary_expression to state [32]
transition on BITWISEAND to state [9]
transition on AND_expression to state [52]
transition on DECREMENT to state [7]
transition on cast_expression to state [6]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [52]: {
  [AND_expression ::= AND_expression (*) BITWISEAND equality_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [exclusive_OR_expression ::= exclusive_OR_expression BWISEXOR AND_expression (*) , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
}
transition on BITWISEAND to state [53]

-------------------
lalr_state [53]: {
  [equality_expression ::= (*) equality_expression EQ relational_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [shift_expression ::= (*) additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [cast_expression ::= (*) unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) unary_operator cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TIMES , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [additive_expression ::= (*) multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) PLUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) postfix_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) primary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) MINUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [AND_expression ::= AND_expression BITWISEAND (*) equality_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) AMPERSAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [primary_expression ::= (*) CONST , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [equality_expression ::= (*) relational_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TILDE , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) BITWISEAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
}
transition on AMPERSAND to state [31]
transition on unary_operator to state [30]
transition on multiplicative_expression to state [29]
transition on CONST to state [26]
transition on MINUS to state [25]
transition on INCREMENT to state [24]
transition on equality_expression to state [54]
transition on relational_expression to state [22]
transition on additive_expression to state [21]
transition on STRING_LITERAL to state [16]
transition on postfix_expression to state [15]
transition on TILDE to state [14]
transition on shift_expression to state [13]
transition on LPAREN to state [11]
transition on unary_expression to state [32]
transition on BITWISEAND to state [9]
transition on DECREMENT to state [7]
transition on cast_expression to state [6]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [54]: {
  [equality_expression ::= equality_expression (*) NEQ relational_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [AND_expression ::= AND_expression BITWISEAND equality_expression (*) , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [equality_expression ::= equality_expression (*) EQ relational_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
}
transition on NEQ to state [56]
transition on EQ to state [55]

-------------------
lalr_state [55]: {
  [equality_expression ::= equality_expression EQ (*) relational_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [shift_expression ::= (*) additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [cast_expression ::= (*) unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) unary_operator cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TIMES , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [additive_expression ::= (*) multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) PLUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) postfix_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) primary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) MINUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [relational_expression ::= (*) shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) AMPERSAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [primary_expression ::= (*) CONST , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TILDE , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) BITWISEAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
}
transition on AMPERSAND to state [31]
transition on unary_operator to state [30]
transition on multiplicative_expression to state [29]
transition on CONST to state [26]
transition on MINUS to state [25]
transition on INCREMENT to state [24]
transition on relational_expression to state [74]
transition on additive_expression to state [21]
transition on STRING_LITERAL to state [16]
transition on postfix_expression to state [15]
transition on TILDE to state [14]
transition on shift_expression to state [13]
transition on LPAREN to state [11]
transition on unary_expression to state [32]
transition on BITWISEAND to state [9]
transition on DECREMENT to state [7]
transition on cast_expression to state [6]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [56]: {
  [shift_expression ::= (*) additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [cast_expression ::= (*) unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) unary_operator cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TIMES , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [equality_expression ::= equality_expression NEQ (*) relational_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [additive_expression ::= (*) multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) PLUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) postfix_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) primary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) MINUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [relational_expression ::= (*) shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) AMPERSAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [primary_expression ::= (*) CONST , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TILDE , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) BITWISEAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
}
transition on AMPERSAND to state [31]
transition on unary_operator to state [30]
transition on multiplicative_expression to state [29]
transition on CONST to state [26]
transition on MINUS to state [25]
transition on INCREMENT to state [24]
transition on relational_expression to state [57]
transition on additive_expression to state [21]
transition on STRING_LITERAL to state [16]
transition on postfix_expression to state [15]
transition on TILDE to state [14]
transition on shift_expression to state [13]
transition on LPAREN to state [11]
transition on unary_expression to state [32]
transition on BITWISEAND to state [9]
transition on DECREMENT to state [7]
transition on cast_expression to state [6]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [57]: {
  [relational_expression ::= relational_expression (*) GE shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [relational_expression ::= relational_expression (*) LT shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [relational_expression ::= relational_expression (*) LE shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [equality_expression ::= equality_expression NEQ relational_expression (*) , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [relational_expression ::= relational_expression (*) GT shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
}
transition on GE to state [61]
transition on LE to state [60]
transition on GT to state [59]
transition on LT to state [58]

-------------------
lalr_state [58]: {
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) unary_operator cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TIMES , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [additive_expression ::= (*) multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) primary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) AMPERSAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_operator ::= (*) TILDE , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [shift_expression ::= (*) additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) PLUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [multiplicative_expression ::= (*) cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) BITWISEAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [cast_expression ::= (*) unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) postfix_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) MINUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [relational_expression ::= relational_expression LT (*) shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [primary_expression ::= (*) CONST , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
}
transition on AMPERSAND to state [31]
transition on unary_operator to state [30]
transition on multiplicative_expression to state [29]
transition on CONST to state [26]
transition on MINUS to state [25]
transition on INCREMENT to state [24]
transition on additive_expression to state [21]
transition on STRING_LITERAL to state [16]
transition on postfix_expression to state [15]
transition on TILDE to state [14]
transition on shift_expression to state [73]
transition on LPAREN to state [11]
transition on unary_expression to state [32]
transition on BITWISEAND to state [9]
transition on DECREMENT to state [7]
transition on cast_expression to state [6]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [59]: {
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) unary_operator cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TIMES , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [additive_expression ::= (*) multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) primary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) AMPERSAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_operator ::= (*) TILDE , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [relational_expression ::= relational_expression GT (*) shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [shift_expression ::= (*) additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) PLUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [multiplicative_expression ::= (*) cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) BITWISEAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [cast_expression ::= (*) unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) postfix_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) MINUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [primary_expression ::= (*) CONST , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
}
transition on AMPERSAND to state [31]
transition on unary_operator to state [30]
transition on multiplicative_expression to state [29]
transition on CONST to state [26]
transition on MINUS to state [25]
transition on INCREMENT to state [24]
transition on additive_expression to state [21]
transition on STRING_LITERAL to state [16]
transition on postfix_expression to state [15]
transition on TILDE to state [14]
transition on shift_expression to state [72]
transition on LPAREN to state [11]
transition on unary_expression to state [32]
transition on BITWISEAND to state [9]
transition on DECREMENT to state [7]
transition on cast_expression to state [6]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [60]: {
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) unary_operator cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TIMES , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [additive_expression ::= (*) multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) primary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) AMPERSAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_operator ::= (*) TILDE , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [shift_expression ::= (*) additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) PLUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [multiplicative_expression ::= (*) cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) BITWISEAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [cast_expression ::= (*) unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [relational_expression ::= relational_expression LE (*) shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) postfix_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) MINUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [primary_expression ::= (*) CONST , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
}
transition on AMPERSAND to state [31]
transition on unary_operator to state [30]
transition on multiplicative_expression to state [29]
transition on CONST to state [26]
transition on MINUS to state [25]
transition on INCREMENT to state [24]
transition on additive_expression to state [21]
transition on STRING_LITERAL to state [16]
transition on postfix_expression to state [15]
transition on TILDE to state [14]
transition on shift_expression to state [71]
transition on LPAREN to state [11]
transition on unary_expression to state [32]
transition on BITWISEAND to state [9]
transition on DECREMENT to state [7]
transition on cast_expression to state [6]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [61]: {
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) unary_operator cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TIMES , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [additive_expression ::= (*) multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [relational_expression ::= relational_expression GE (*) shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) primary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) AMPERSAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_operator ::= (*) TILDE , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [shift_expression ::= (*) additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) PLUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [multiplicative_expression ::= (*) cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) BITWISEAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [cast_expression ::= (*) unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) postfix_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) MINUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [primary_expression ::= (*) CONST , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
}
transition on AMPERSAND to state [31]
transition on unary_operator to state [30]
transition on multiplicative_expression to state [29]
transition on CONST to state [26]
transition on MINUS to state [25]
transition on INCREMENT to state [24]
transition on additive_expression to state [21]
transition on STRING_LITERAL to state [16]
transition on postfix_expression to state [15]
transition on TILDE to state [14]
transition on shift_expression to state [62]
transition on LPAREN to state [11]
transition on unary_expression to state [32]
transition on BITWISEAND to state [9]
transition on DECREMENT to state [7]
transition on cast_expression to state [6]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [62]: {
  [shift_expression ::= shift_expression (*) LSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [shift_expression ::= shift_expression (*) RSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [relational_expression ::= relational_expression GE shift_expression (*) , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
}
transition on RSHIFT to state [64]
transition on LSHIFT to state [63]

-------------------
lalr_state [63]: {
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) unary_operator cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TIMES , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [additive_expression ::= (*) multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) primary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) AMPERSAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_operator ::= (*) TILDE , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) PLUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [multiplicative_expression ::= (*) cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) BITWISEAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [cast_expression ::= (*) unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [shift_expression ::= shift_expression LSHIFT (*) additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) postfix_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) MINUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [primary_expression ::= (*) CONST , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
}
transition on AMPERSAND to state [31]
transition on unary_operator to state [30]
transition on multiplicative_expression to state [29]
transition on CONST to state [26]
transition on MINUS to state [25]
transition on INCREMENT to state [24]
transition on additive_expression to state [70]
transition on STRING_LITERAL to state [16]
transition on postfix_expression to state [15]
transition on TILDE to state [14]
transition on LPAREN to state [11]
transition on unary_expression to state [32]
transition on BITWISEAND to state [9]
transition on DECREMENT to state [7]
transition on cast_expression to state [6]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [64]: {
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) unary_operator cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TIMES , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [shift_expression ::= shift_expression RSHIFT (*) additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [additive_expression ::= (*) multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) primary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) AMPERSAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_operator ::= (*) TILDE , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) PLUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [multiplicative_expression ::= (*) cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) BITWISEAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [cast_expression ::= (*) unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) postfix_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) MINUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [primary_expression ::= (*) CONST , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
}
transition on AMPERSAND to state [31]
transition on unary_operator to state [30]
transition on multiplicative_expression to state [29]
transition on CONST to state [26]
transition on MINUS to state [25]
transition on INCREMENT to state [24]
transition on additive_expression to state [65]
transition on STRING_LITERAL to state [16]
transition on postfix_expression to state [15]
transition on TILDE to state [14]
transition on LPAREN to state [11]
transition on unary_expression to state [32]
transition on BITWISEAND to state [9]
transition on DECREMENT to state [7]
transition on cast_expression to state [6]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [65]: {
  [additive_expression ::= additive_expression (*) MINUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [additive_expression ::= additive_expression (*) PLUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [shift_expression ::= shift_expression RSHIFT additive_expression (*) , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
}
transition on MINUS to state [67]
transition on PLUS to state [66]

-------------------
lalr_state [66]: {
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) unary_operator cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TIMES , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) primary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) AMPERSAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_operator ::= (*) TILDE , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) PLUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [additive_expression ::= additive_expression PLUS (*) multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) BITWISEAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [cast_expression ::= (*) unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) postfix_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) MINUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [primary_expression ::= (*) CONST , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
}
transition on AMPERSAND to state [31]
transition on unary_operator to state [30]
transition on multiplicative_expression to state [69]
transition on CONST to state [26]
transition on MINUS to state [25]
transition on INCREMENT to state [24]
transition on STRING_LITERAL to state [16]
transition on postfix_expression to state [15]
transition on TILDE to state [14]
transition on LPAREN to state [11]
transition on unary_expression to state [32]
transition on BITWISEAND to state [9]
transition on DECREMENT to state [7]
transition on cast_expression to state [6]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [67]: {
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) unary_operator cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TIMES , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) primary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) AMPERSAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_operator ::= (*) TILDE , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) PLUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [multiplicative_expression ::= (*) cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) BITWISEAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [cast_expression ::= (*) unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) postfix_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) MINUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [additive_expression ::= additive_expression MINUS (*) multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [primary_expression ::= (*) CONST , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT GT LBRACK RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT ARROW LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
}
transition on AMPERSAND to state [31]
transition on unary_operator to state [30]
transition on multiplicative_expression to state [68]
transition on CONST to state [26]
transition on MINUS to state [25]
transition on INCREMENT to state [24]
transition on STRING_LITERAL to state [16]
transition on postfix_expression to state [15]
transition on TILDE to state [14]
transition on LPAREN to state [11]
transition on unary_expression to state [32]
transition on BITWISEAND to state [9]
transition on DECREMENT to state [7]
transition on cast_expression to state [6]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [68]: {
  [multiplicative_expression ::= multiplicative_expression (*) MODULUS cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [multiplicative_expression ::= multiplicative_expression (*) DIVIDE cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [multiplicative_expression ::= multiplicative_expression (*) TIMES cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [additive_expression ::= additive_expression MINUS multiplicative_expression (*) , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
}
transition on TIMES to state [36]
transition on MODULUS to state [35]
transition on DIVIDE to state [34]

-------------------
lalr_state [69]: {
  [multiplicative_expression ::= multiplicative_expression (*) MODULUS cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [additive_expression ::= additive_expression PLUS multiplicative_expression (*) , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [multiplicative_expression ::= multiplicative_expression (*) DIVIDE cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [multiplicative_expression ::= multiplicative_expression (*) TIMES cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
}
transition on TIMES to state [36]
transition on MODULUS to state [35]
transition on DIVIDE to state [34]

-------------------
lalr_state [70]: {
  [additive_expression ::= additive_expression (*) MINUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [shift_expression ::= shift_expression LSHIFT additive_expression (*) , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [additive_expression ::= additive_expression (*) PLUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
}
transition on MINUS to state [67]
transition on PLUS to state [66]

-------------------
lalr_state [71]: {
  [shift_expression ::= shift_expression (*) LSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [relational_expression ::= relational_expression LE shift_expression (*) , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [shift_expression ::= shift_expression (*) RSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
}
transition on RSHIFT to state [64]
transition on LSHIFT to state [63]

-------------------
lalr_state [72]: {
  [shift_expression ::= shift_expression (*) LSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [relational_expression ::= relational_expression GT shift_expression (*) , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [shift_expression ::= shift_expression (*) RSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
}
transition on RSHIFT to state [64]
transition on LSHIFT to state [63]

-------------------
lalr_state [73]: {
  [relational_expression ::= relational_expression LT shift_expression (*) , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [shift_expression ::= shift_expression (*) LSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [shift_expression ::= shift_expression (*) RSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
}
transition on RSHIFT to state [64]
transition on LSHIFT to state [63]

-------------------
lalr_state [74]: {
  [relational_expression ::= relational_expression (*) GE shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [relational_expression ::= relational_expression (*) LT shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [equality_expression ::= equality_expression EQ relational_expression (*) , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [relational_expression ::= relational_expression (*) LE shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [relational_expression ::= relational_expression (*) GT shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS COLON LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
}
transition on GE to state [61]
transition on LE to state [60]
transition on GT to state [59]
transition on LT to state [58]

-------------------
lalr_state [75]: {
  [unary_expression ::= INCREMENT unary_expression (*) , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}

-------------------
lalr_state [76]: {
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {error STRING_LITERAL BITWISEAND LPAREN RPAREN TIMES PLUS MINUS TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [shift_expression ::= (*) additive_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [cast_expression ::= (*) unary_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) unary_operator cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [assignment_expression ::= (*) conditional_expression , {RPAREN COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TIMES , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= LPAREN (*) expression RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [expression ::= (*) error , {RPAREN COMMA }]
  [logical_OR_expression ::= (*) logical_AND_expression , {error STRING_LITERAL BITWISEAND LPAREN RPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF unary_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [assignment_expression ::= (*) unary_expression assignment_operator assignment_expression , {RPAREN COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [additive_expression ::= (*) multiplicative_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) PLUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) postfix_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [expression ::= (*) assignment_expression , {RPAREN COMMA }]
  [postfix_expression ::= (*) primary_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {error STRING_LITERAL BITWISEAND LPAREN RPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [AND_expression ::= (*) equality_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) MINUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) INCREMENT unary_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [expression ::= (*) expression COMMA assignment_expression , {RPAREN COMMA }]
  [conditional_expression ::= (*) logical_OR_expression , {RPAREN COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) shift_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) AMPERSAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [primary_expression ::= (*) CONST , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {error STRING_LITERAL BITWISEAND LPAREN RPAREN TIMES PLUS MINUS TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [equality_expression ::= (*) relational_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TILDE , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) DECREMENT unary_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [conditional_expression ::= (*) logical_OR_expression expression COLON conditional_expression , {RPAREN COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) BITWISEAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) STRING_LITERAL , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}
transition on AMPERSAND to state [31]
transition on unary_operator to state [30]
transition on multiplicative_expression to state [29]
transition on logical_OR_expression to state [28]
transition on error to state [27]
transition on CONST to state [26]
transition on MINUS to state [25]
transition on INCREMENT to state [24]
transition on equality_expression to state [23]
transition on relational_expression to state [22]
transition on additive_expression to state [21]
transition on inclusive_OR_expression to state [20]
transition on expression to state [77]
transition on logical_AND_expression to state [18]
transition on exclusive_OR_expression to state [17]
transition on STRING_LITERAL to state [16]
transition on postfix_expression to state [15]
transition on TILDE to state [14]
transition on shift_expression to state [13]
transition on conditional_expression to state [12]
transition on LPAREN to state [11]
transition on unary_expression to state [10]
transition on BITWISEAND to state [9]
transition on AND_expression to state [8]
transition on DECREMENT to state [7]
transition on cast_expression to state [6]
transition on assignment_expression to state [5]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [77]: {
  [expression ::= expression (*) COMMA assignment_expression , {RPAREN COMMA }]
  [primary_expression ::= LPAREN expression (*) RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}
transition on RPAREN to state [78]
transition on COMMA to state [42]

-------------------
lalr_state [78]: {
  [primary_expression ::= LPAREN expression RPAREN (*) , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}

-------------------
lalr_state [79]: {
  [$START ::= expression EOF (*) , {EOF }]
}

-------------------
lalr_state [80]: {
  [postfix_expression ::= postfix_expression DECREMENT (*) , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}

-------------------
lalr_state [81]: {
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {error STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS RBRACK TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [shift_expression ::= (*) additive_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [cast_expression ::= (*) unary_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS DIVIDE LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) unary_operator cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS DIVIDE LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [assignment_expression ::= (*) conditional_expression , {COMMA RBRACK }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS RBRACK BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS DIVIDE LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TIMES , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [expression ::= (*) error , {COMMA RBRACK }]
  [logical_OR_expression ::= (*) logical_AND_expression , {error STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS RBRACK TILDE AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS DIVIDE LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF unary_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS DIVIDE LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [assignment_expression ::= (*) unary_expression assignment_operator assignment_expression , {COMMA RBRACK }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS RBRACK TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [additive_expression ::= (*) multiplicative_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) PLUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) postfix_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS DIVIDE LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [expression ::= (*) assignment_expression , {COMMA RBRACK }]
  [postfix_expression ::= (*) primary_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {error STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS RBRACK TILDE AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [AND_expression ::= (*) equality_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS RBRACK BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS DIVIDE LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS DIVIDE LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS RBRACK TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) MINUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [postfix_expression ::= postfix_expression LBRACK (*) expression RBRACK , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_expression ::= (*) INCREMENT unary_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS DIVIDE LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [expression ::= (*) expression COMMA assignment_expression , {COMMA RBRACK }]
  [conditional_expression ::= (*) logical_OR_expression , {COMMA RBRACK }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS RBRACK BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) shift_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS DIVIDE LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) AMPERSAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [primary_expression ::= (*) CONST , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {error STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS RBRACK TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [equality_expression ::= (*) relational_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TILDE , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) DECREMENT unary_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS DIVIDE LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [conditional_expression ::= (*) logical_OR_expression expression COLON conditional_expression , {COMMA RBRACK }]
  [exclusive_OR_expression ::= (*) AND_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS RBRACK BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS DIVIDE LT GT RBRACK BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) BITWISEAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) STRING_LITERAL , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}
transition on AMPERSAND to state [31]
transition on unary_operator to state [30]
transition on multiplicative_expression to state [29]
transition on logical_OR_expression to state [28]
transition on error to state [27]
transition on CONST to state [26]
transition on MINUS to state [25]
transition on INCREMENT to state [24]
transition on equality_expression to state [23]
transition on relational_expression to state [22]
transition on additive_expression to state [21]
transition on inclusive_OR_expression to state [20]
transition on expression to state [93]
transition on logical_AND_expression to state [18]
transition on exclusive_OR_expression to state [17]
transition on STRING_LITERAL to state [16]
transition on postfix_expression to state [15]
transition on TILDE to state [14]
transition on shift_expression to state [13]
transition on conditional_expression to state [12]
transition on LPAREN to state [11]
transition on unary_expression to state [10]
transition on BITWISEAND to state [9]
transition on AND_expression to state [8]
transition on DECREMENT to state [7]
transition on cast_expression to state [6]
transition on assignment_expression to state [5]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [82]: {
  [postfix_expression ::= postfix_expression INCREMENT (*) , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}

-------------------
lalr_state [83]: {
  [postfix_expression ::= postfix_expression ARROW (*) ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}
transition on ID to state [92]

-------------------
lalr_state [84]: {
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {error STRING_LITERAL BITWISEAND LPAREN RPAREN TIMES PLUS MINUS TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [shift_expression ::= (*) additive_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [cast_expression ::= (*) unary_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) unary_operator cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [assignment_expression ::= (*) conditional_expression , {RPAREN COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TIMES , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [argument_expression_list ::= (*) argument_expression_list COMMA assignment_expression , {RPAREN COMMA }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [logical_OR_expression ::= (*) logical_AND_expression , {error STRING_LITERAL BITWISEAND LPAREN RPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF unary_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [assignment_expression ::= (*) unary_expression assignment_operator assignment_expression , {RPAREN COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [additive_expression ::= (*) multiplicative_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) PLUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) postfix_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) primary_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {error STRING_LITERAL BITWISEAND LPAREN RPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [AND_expression ::= (*) equality_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) MINUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) INCREMENT unary_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [conditional_expression ::= (*) logical_OR_expression , {RPAREN COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) shift_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) AMPERSAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [primary_expression ::= (*) CONST , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {error STRING_LITERAL BITWISEAND LPAREN RPAREN TIMES PLUS MINUS TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [equality_expression ::= (*) relational_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [postfix_expression ::= postfix_expression LPAREN (*) argument_expression_list RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_operator ::= (*) TILDE , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) DECREMENT unary_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [conditional_expression ::= (*) logical_OR_expression expression COLON conditional_expression , {RPAREN COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) BITWISEAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [argument_expression_list ::= (*) assignment_expression , {RPAREN COMMA }]
  [primary_expression ::= (*) STRING_LITERAL , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}
transition on AMPERSAND to state [31]
transition on unary_operator to state [30]
transition on multiplicative_expression to state [29]
transition on argument_expression_list to state [88]
transition on logical_OR_expression to state [28]
transition on CONST to state [26]
transition on MINUS to state [25]
transition on INCREMENT to state [24]
transition on equality_expression to state [23]
transition on relational_expression to state [22]
transition on additive_expression to state [21]
transition on inclusive_OR_expression to state [20]
transition on logical_AND_expression to state [18]
transition on exclusive_OR_expression to state [17]
transition on STRING_LITERAL to state [16]
transition on postfix_expression to state [15]
transition on TILDE to state [14]
transition on shift_expression to state [13]
transition on conditional_expression to state [12]
transition on LPAREN to state [11]
transition on unary_expression to state [10]
transition on BITWISEAND to state [9]
transition on AND_expression to state [8]
transition on DECREMENT to state [7]
transition on cast_expression to state [6]
transition on assignment_expression to state [87]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [85]: {
  [postfix_expression ::= postfix_expression PERIOD (*) ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}
transition on ID to state [86]

-------------------
lalr_state [86]: {
  [postfix_expression ::= postfix_expression PERIOD ID (*) , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}

-------------------
lalr_state [87]: {
  [argument_expression_list ::= assignment_expression (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [88]: {
  [postfix_expression ::= postfix_expression LPAREN argument_expression_list (*) RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [argument_expression_list ::= argument_expression_list (*) COMMA assignment_expression , {RPAREN COMMA }]
}
transition on RPAREN to state [90]
transition on COMMA to state [89]

-------------------
lalr_state [89]: {
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {error STRING_LITERAL BITWISEAND LPAREN RPAREN TIMES PLUS COMMA MINUS TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [shift_expression ::= (*) additive_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [cast_expression ::= (*) unary_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) unary_operator cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [assignment_expression ::= (*) conditional_expression , {RPAREN COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [argument_expression_list ::= argument_expression_list COMMA (*) assignment_expression , {RPAREN COMMA }]
  [unary_operator ::= (*) TIMES , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [logical_OR_expression ::= (*) logical_AND_expression , {error STRING_LITERAL BITWISEAND LPAREN RPAREN TIMES PLUS COMMA MINUS TILDE AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF unary_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [assignment_expression ::= (*) unary_expression assignment_operator assignment_expression , {RPAREN COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [additive_expression ::= (*) multiplicative_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) PLUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) postfix_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) primary_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {error STRING_LITERAL BITWISEAND LPAREN RPAREN TIMES PLUS COMMA MINUS TILDE AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [AND_expression ::= (*) equality_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) MINUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) INCREMENT unary_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [conditional_expression ::= (*) logical_OR_expression , {RPAREN COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) shift_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) AMPERSAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [primary_expression ::= (*) CONST , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {error STRING_LITERAL BITWISEAND LPAREN RPAREN TIMES PLUS COMMA MINUS TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [equality_expression ::= (*) relational_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TILDE , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) DECREMENT unary_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [conditional_expression ::= (*) logical_OR_expression expression COLON conditional_expression , {RPAREN COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) BITWISEAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) STRING_LITERAL , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}
transition on AMPERSAND to state [31]
transition on unary_operator to state [30]
transition on multiplicative_expression to state [29]
transition on logical_OR_expression to state [28]
transition on CONST to state [26]
transition on MINUS to state [25]
transition on INCREMENT to state [24]
transition on equality_expression to state [23]
transition on relational_expression to state [22]
transition on additive_expression to state [21]
transition on inclusive_OR_expression to state [20]
transition on logical_AND_expression to state [18]
transition on exclusive_OR_expression to state [17]
transition on STRING_LITERAL to state [16]
transition on postfix_expression to state [15]
transition on TILDE to state [14]
transition on shift_expression to state [13]
transition on conditional_expression to state [12]
transition on LPAREN to state [11]
transition on unary_expression to state [10]
transition on BITWISEAND to state [9]
transition on AND_expression to state [8]
transition on DECREMENT to state [7]
transition on cast_expression to state [6]
transition on assignment_expression to state [91]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [90]: {
  [postfix_expression ::= postfix_expression LPAREN argument_expression_list RPAREN (*) , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}

-------------------
lalr_state [91]: {
  [argument_expression_list ::= argument_expression_list COMMA assignment_expression (*) , {RPAREN COMMA }]
}

-------------------
lalr_state [92]: {
  [postfix_expression ::= postfix_expression ARROW ID (*) , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}

-------------------
lalr_state [93]: {
  [postfix_expression ::= postfix_expression LBRACK expression (*) RBRACK , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [expression ::= expression (*) COMMA assignment_expression , {COMMA RBRACK }]
}
transition on RBRACK to state [94]
transition on COMMA to state [42]

-------------------
lalr_state [94]: {
  [postfix_expression ::= postfix_expression LBRACK expression RBRACK (*) , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}

-------------------
lalr_state [95]: {
  [type_name ::= SHORT (*) , {RPAREN }]
}

-------------------
lalr_state [96]: {
  [type_name ::= CHAR (*) , {RPAREN }]
}

-------------------
lalr_state [97]: {
  [type_name ::= DOUBLE (*) , {RPAREN }]
}

-------------------
lalr_state [98]: {
  [type_name ::= INT (*) , {RPAREN }]
}

-------------------
lalr_state [99]: {
  [type_name ::= ID (*) , {RPAREN }]
}

-------------------
lalr_state [100]: {
  [cast_expression ::= LPAREN type_name (*) RPAREN cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}
transition on RPAREN to state [106]

-------------------
lalr_state [101]: {
  [type_name ::= VOID (*) , {RPAREN }]
}

-------------------
lalr_state [102]: {
  [type_name ::= ENUM (*) ID , {RPAREN }]
}
transition on ID to state [105]

-------------------
lalr_state [103]: {
  [type_name ::= FLOAT (*) , {RPAREN }]
}

-------------------
lalr_state [104]: {
  [type_name ::= LONG (*) , {RPAREN }]
}

-------------------
lalr_state [105]: {
  [type_name ::= ENUM ID (*) , {RPAREN }]
}

-------------------
lalr_state [106]: {
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [cast_expression ::= LPAREN type_name RPAREN (*) cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_expression ::= (*) unary_operator cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_operator ::= (*) TIMES , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) primary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_operator ::= (*) AMPERSAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_operator ::= (*) TILDE , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_operator ::= (*) PLUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_operator ::= (*) BITWISEAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [cast_expression ::= (*) unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_expression ::= (*) postfix_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [unary_operator ::= (*) MINUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) CONST , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}
transition on AMPERSAND to state [31]
transition on CONST to state [26]
transition on BITWISEAND to state [9]
transition on LPAREN to state [11]
transition on primary_expression to state [3]
transition on TIMES to state [1]
transition on DECREMENT to state [7]
transition on cast_expression to state [107]
transition on TILDE to state [14]
transition on postfix_expression to state [15]
transition on PLUS to state [4]
transition on STRING_LITERAL to state [16]
transition on unary_expression to state [32]
transition on SIZEOF to state [2]
transition on unary_operator to state [30]
transition on INCREMENT to state [24]
transition on MINUS to state [25]

-------------------
lalr_state [107]: {
  [cast_expression ::= LPAREN type_name RPAREN cast_expression (*) , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}

-------------------
lalr_state [108]: {
  [assignment_operator ::= MULASSIGN (*) , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
}

-------------------
lalr_state [109]: {
  [assignment_operator ::= BWISEORASSIGN (*) , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
}

-------------------
lalr_state [110]: {
  [assignment_operator ::= SUBASSIGN (*) , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
}

-------------------
lalr_state [111]: {
  [assignment_operator ::= LSHIFTASSIGN (*) , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
}

-------------------
lalr_state [112]: {
  [assignment_operator ::= BWISEAND (*) , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
}

-------------------
lalr_state [113]: {
  [assignment_operator ::= ADDASSIGN (*) , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
}

-------------------
lalr_state [114]: {
  [assignment_operator ::= BWISEXORASSIGN (*) , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
}

-------------------
lalr_state [115]: {
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {EOF error STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [shift_expression ::= (*) additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [cast_expression ::= (*) unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) unary_operator cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [assignment_expression ::= (*) conditional_expression , {EOF RPAREN COMMA COLON RBRACK }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TIMES , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [logical_OR_expression ::= (*) logical_AND_expression , {EOF error STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [assignment_expression ::= unary_expression assignment_operator (*) assignment_expression , {EOF RPAREN COMMA COLON RBRACK }]
  [assignment_expression ::= (*) unary_expression assignment_operator assignment_expression , {EOF RPAREN COMMA COLON RBRACK }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [additive_expression ::= (*) multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) PLUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) postfix_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) primary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {EOF error STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [AND_expression ::= (*) equality_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) MINUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) INCREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [conditional_expression ::= (*) logical_OR_expression , {EOF RPAREN COMMA COLON RBRACK }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) AMPERSAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [primary_expression ::= (*) CONST , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {EOF error STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [equality_expression ::= (*) relational_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TILDE , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) DECREMENT unary_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [conditional_expression ::= (*) logical_OR_expression expression COLON conditional_expression , {EOF RPAREN COMMA COLON RBRACK }]
  [exclusive_OR_expression ::= (*) AND_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {EOF error STRING_LITERAL BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) BITWISEAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) STRING_LITERAL , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}
transition on AMPERSAND to state [31]
transition on unary_operator to state [30]
transition on multiplicative_expression to state [29]
transition on logical_OR_expression to state [28]
transition on CONST to state [26]
transition on MINUS to state [25]
transition on INCREMENT to state [24]
transition on equality_expression to state [23]
transition on relational_expression to state [22]
transition on additive_expression to state [21]
transition on inclusive_OR_expression to state [20]
transition on logical_AND_expression to state [18]
transition on exclusive_OR_expression to state [17]
transition on STRING_LITERAL to state [16]
transition on postfix_expression to state [15]
transition on TILDE to state [14]
transition on shift_expression to state [13]
transition on conditional_expression to state [12]
transition on LPAREN to state [11]
transition on unary_expression to state [10]
transition on BITWISEAND to state [9]
transition on AND_expression to state [8]
transition on DECREMENT to state [7]
transition on cast_expression to state [6]
transition on assignment_expression to state [120]
transition on PLUS to state [4]
transition on primary_expression to state [3]
transition on SIZEOF to state [2]
transition on TIMES to state [1]

-------------------
lalr_state [116]: {
  [assignment_operator ::= ASSIGN (*) , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
}

-------------------
lalr_state [117]: {
  [assignment_operator ::= RSHIFTASSIGN (*) , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
}

-------------------
lalr_state [118]: {
  [assignment_operator ::= DIVASSIGN (*) , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
}

-------------------
lalr_state [119]: {
  [assignment_operator ::= MODASSIGN (*) , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
}

-------------------
lalr_state [120]: {
  [assignment_expression ::= unary_expression assignment_operator assignment_expression (*) , {EOF RPAREN COMMA COLON RBRACK }]
}

-------------------
lalr_state [121]: {
  [unary_expression ::= DECREMENT unary_expression (*) , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}

-------------------
lalr_state [122]: {
  [unary_expression ::= SIZEOF unary_expression (*) , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}

-------------------
lalr_state [123]: {
  [type_name ::= (*) VOID , {RPAREN }]
  [logical_AND_expression ::= (*) logical_AND_expression AND inclusive_OR_expression , {error STRING_LITERAL BITWISEAND LPAREN RPAREN TIMES PLUS MINUS TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [equality_expression ::= (*) equality_expression EQ relational_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [shift_expression ::= (*) additive_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [cast_expression ::= (*) unary_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) unary_operator cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression PERIOD ID , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [type_name ::= (*) FLOAT , {RPAREN }]
  [assignment_expression ::= (*) conditional_expression , {RPAREN COMMA }]
  [exclusive_OR_expression ::= (*) exclusive_OR_expression BWISEXOR AND_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression GT shift_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression MODULUS cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TIMES , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= LPAREN (*) expression RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS PERIOD DIVIDE COLON LT ASSIGN GT LBRACK RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [expression ::= (*) error , {RPAREN COMMA }]
  [type_name ::= (*) CHAR , {RPAREN }]
  [logical_OR_expression ::= (*) logical_AND_expression , {error STRING_LITERAL BITWISEAND LPAREN RPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [equality_expression ::= (*) equality_expression NEQ relational_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression LSHIFT additive_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [cast_expression ::= (*) LPAREN type_name RPAREN cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF unary_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression ARROW ID , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [type_name ::= (*) DOUBLE , {RPAREN }]
  [assignment_expression ::= (*) unary_expression assignment_operator assignment_expression , {RPAREN COMMA }]
  [inclusive_OR_expression ::= (*) exclusive_OR_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression LE shift_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [additive_expression ::= (*) multiplicative_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) PLUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) postfix_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) primary_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [expression ::= (*) assignment_expression , {RPAREN COMMA }]
  [type_name ::= (*) SHORT , {RPAREN }]
  [logical_OR_expression ::= (*) logical_OR_expression OR logical_AND_expression , {error STRING_LITERAL BITWISEAND LPAREN RPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [AND_expression ::= (*) equality_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [shift_expression ::= (*) shift_expression RSHIFT additive_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= SIZEOF LPAREN (*) type_name RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [multiplicative_expression ::= (*) cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_expression ::= (*) SIZEOF LPAREN type_name RPAREN , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [type_name ::= (*) ENUM ID , {RPAREN }]
  [inclusive_OR_expression ::= (*) inclusive_OR_expression BWISEOR exclusive_OR_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression GE shift_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression PLUS multiplicative_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) MINUS , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) INCREMENT unary_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LBRACK expression RBRACK , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [expression ::= (*) expression COMMA assignment_expression , {RPAREN COMMA }]
  [type_name ::= (*) INT , {RPAREN }]
  [conditional_expression ::= (*) logical_OR_expression , {RPAREN COMMA }]
  [AND_expression ::= (*) AND_expression BITWISEAND equality_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) shift_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression TIMES cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) AMPERSAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [primary_expression ::= (*) CONST , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [type_name ::= (*) ID , {RPAREN }]
  [logical_AND_expression ::= (*) inclusive_OR_expression , {error STRING_LITERAL BITWISEAND LPAREN RPAREN TIMES PLUS MINUS TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [equality_expression ::= (*) relational_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT EQ OR CONST SIZEOF }]
  [additive_expression ::= (*) additive_expression MINUS multiplicative_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) TILDE , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [unary_expression ::= (*) DECREMENT unary_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT ASSIGN GT BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [postfix_expression ::= (*) postfix_expression LPAREN argument_expression_list RPAREN , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
  [type_name ::= (*) LONG , {RPAREN }]
  [conditional_expression ::= (*) logical_OR_expression expression COLON conditional_expression , {RPAREN COMMA }]
  [exclusive_OR_expression ::= (*) AND_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS BWISEXOR TILDE AND AMPERSAND INCREMENT DECREMENT OR CONST SIZEOF }]
  [relational_expression ::= (*) relational_expression LT shift_expression , {error STRING_LITERAL BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LE EQ GE OR CONST SIZEOF }]
  [multiplicative_expression ::= (*) multiplicative_expression DIVIDE cast_expression , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS DIVIDE LT GT BWISEXOR TILDE NEQ AND AMPERSAND INCREMENT DECREMENT LSHIFT LE EQ GE RSHIFT OR CONST SIZEOF }]
  [unary_operator ::= (*) BITWISEAND , {STRING_LITERAL BITWISEAND LPAREN TIMES PLUS MINUS TILDE AMPERSAND INCREMENT DECREMENT CONST SIZEOF }]
  [primary_expression ::= (*) STRING_LITERAL , {error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS MINUS PERIOD DIVIDE LT ASSIGN GT LBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN ARROW DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}
transition on unary_operator to state [30]
transition on relational_expression to state [22]
transition on LONG to state [104]
transition on multiplicative_expression to state [29]
transition on FLOAT to state [103]
transition on ENUM to state [102]
transition on assignment_expression to state [5]
transition on TIMES to state [1]
transition on AND_expression to state [8]
transition on shift_expression to state [13]
transition on exclusive_OR_expression to state [17]
transition on logical_OR_expression to state [28]
transition on postfix_expression to state [15]
transition on logical_AND_expression to state [18]
transition on VOID to state [101]
transition on type_name to state [124]
transition on conditional_expression to state [12]
transition on error to state [27]
transition on unary_expression to state [10]
transition on expression to state [77]
transition on ID to state [99]
transition on AMPERSAND to state [31]
transition on PLUS to state [4]
transition on cast_expression to state [6]
transition on equality_expression to state [23]
transition on SIZEOF to state [2]
transition on primary_expression to state [3]
transition on TILDE to state [14]
transition on MINUS to state [25]
transition on DECREMENT to state [7]
transition on INT to state [98]
transition on LPAREN to state [11]
transition on DOUBLE to state [97]
transition on BITWISEAND to state [9]
transition on additive_expression to state [21]
transition on CHAR to state [96]
transition on CONST to state [26]
transition on INCREMENT to state [24]
transition on SHORT to state [95]
transition on STRING_LITERAL to state [16]
transition on inclusive_OR_expression to state [20]

-------------------
lalr_state [124]: {
  [unary_expression ::= SIZEOF LPAREN type_name (*) RPAREN , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}
transition on RPAREN to state [125]

-------------------
lalr_state [125]: {
  [unary_expression ::= SIZEOF LPAREN type_name RPAREN (*) , {EOF error STRING_LITERAL MODULUS BITWISEAND BWISEOR LPAREN RPAREN TIMES PLUS COMMA MINUS DIVIDE COLON LT ASSIGN GT RBRACK BWISEXOR TILDE NEQ MODASSIGN AND BWISEAND MULASSIGN AMPERSAND INCREMENT ADDASSIGN DECREMENT SUBASSIGN DIVASSIGN LSHIFT LE EQ GE RSHIFT RSHIFTASSIGN BWISEXORASSIGN BWISEORASSIGN OR LSHIFTASSIGN CONST SIZEOF }]
}

-------------------
Closing files...
------- CUP v0.10g Parser Generation Summary -------
  0 errors and 96 warnings
  85 terminals, 68 non terminals, and 163 productions declared, 
  producing 126 unique parse states.
  12 terminals declared but not used.
  0 non terminals declared but not used.
  0 productions never reduced.
  3 conflicts detected (3 expected).
  Code written to "Grm.java", and "sym.java".
---------------------------------------------------- (v0.10g)
